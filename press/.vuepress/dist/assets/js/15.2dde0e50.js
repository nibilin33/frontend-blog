(window.webpackJsonp=window.webpackJsonp||[]).push([[15],{236:function(t,a,e){"use strict";e.r(a);var r=e(0),s=Object(r.a)({},(function(){var t=this,a=t.$createElement,e=t._self._c||a;return e("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[e("h2",{attrs:{id:"html的盒子模型有哪些构成，盒子模型有哪几种，默认的是哪一种"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#html的盒子模型有哪些构成，盒子模型有哪几种，默认的是哪一种","aria-hidden":"true"}},[t._v("#")]),t._v(" HTML的盒子模型有哪些构成，盒子模型有哪几种，默认的是哪一种")]),t._v(" "),e("p",[t._v("content-box")]),t._v(" "),e("h2",{attrs:{id:"盒子模型有没有办法把宽度设置为包含padding的"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#盒子模型有没有办法把宽度设置为包含padding的","aria-hidden":"true"}},[t._v("#")]),t._v(" 盒子模型有没有办法把宽度设置为包含padding的")]),t._v(" "),e("p",[t._v("border-box")]),t._v(" "),e("h2",{attrs:{id:"浮动元素有没有什么特征"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#浮动元素有没有什么特征","aria-hidden":"true"}},[t._v("#")]),t._v(" 浮动元素有没有什么特征")]),t._v(" "),e("p",[t._v("特征：\n浮动元素会脱离正常的文档流，按照其外边距指定的位置相对于它的上一个块级元素（或父元素）显示\n浮动元素后面的块级元素的内容会向此浮动元素的外边距靠齐，但是边框和背景却忽略浮动元素而向上一个任意非浮动元素靠齐\n浮动元素后面的内联元素会向此浮动元素的外边距靠齐")]),t._v(" "),e("p",[t._v("float造成的影响："),e("br"),t._v("\n1、对其父元素的影响\n对于其父元素来说，元素浮动之后，它脱离当前正常的文档流，所以它也无法撑开其父元素，造成父元素的塌陷\n2、对其兄弟元素（非浮动）的影响"),e("br"),t._v("\n如果兄弟元素为块级元素，该元素会忽视浮动元素的而占据它的位置，并且元素会处在浮动元素的下层（并且无法通过z-index属性改变他们的层叠位置），但它的内部文字和其他行内元素都会环绕浮动元素。\n如果如果兄弟元素为内联元素，则元素会环绕浮动元素排列。\n3、对其兄弟元素（浮动）的影响"),e("br"),t._v("\n同一个方向的浮动元素：当一个浮动元素在浮动过程中碰到同一个方向的浮动元素时，它会紧跟在它们后面\n反方向的浮动元素：互不影响，位于同一条水平线上，当空间不够时会被挤下\n4、对子元素的影响"),e("br"),t._v("\n当一个元素浮动时，在没有清除浮动的情况下，它无法撑开其父元素，但它可以让自己的浮动子元素撑开它自身，并且在没有定义具体宽度情况下，使自身的宽度从100%变为自适应（浮动元素display:block）。其高度和宽度均为浮动元素高度和非浮动元素高度之间的最大值。")]),t._v(" "),e("h2",{attrs:{id:"清除浮动的所有方法"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#清除浮动的所有方法","aria-hidden":"true"}},[t._v("#")]),t._v(" 清除浮动的所有方法")]),t._v(" "),e("ol",[e("li",[t._v("clear:both")]),t._v(" "),e("li",[t._v("overflow:hidden")])]),t._v(" "),e("h2",{attrs:{id:"cookie有哪些特征"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#cookie有哪些特征","aria-hidden":"true"}},[t._v("#")]),t._v(" cookie有哪些特征")]),t._v(" "),e("p",[t._v("cookie可以实现跨页面全局变量"),e("br"),t._v("\ncookie可以跨越同域名下的多个网页，但不能跨越多个域名使用"),e("br"),t._v("\n同一个网站中所有页面共享一套cookie"),e("br"),t._v("\n可以设置有效期限"),e("br"),t._v("\n存储空间4-10KB左右"),e("br"),t._v("\ncookie面临的问题："),e("br"),t._v("\nCSRF(跨站请求伪造)攻击，这个也好解决，很多框架都屏蔽这个问题"),e("br"),t._v("\n有的客户端不支持cookie，需要手动设置，比如小程序\n浏览器对cookie有限制，不能手动设置cookie，对于混合嵌套的开发有问题，比如小程序跳转H5页面，不能携带cookie"),e("br"),t._v("\n浏览器对单个cookie保存的数据不能超过4K，很多浏览器都限制一个站点最多保存20个cookie")]),t._v(" "),e("h2",{attrs:{id:"cookie的其他解决方案"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#cookie的其他解决方案","aria-hidden":"true"}},[t._v("#")]),t._v(" cookie的其他解决方案")]),t._v(" "),e("p",[t._v("session 是另一种记录服务器和客户端会话状态的机制"),e("br"),t._v("\nsession 是基于 cookie 实现的，session 存储在服务器端，sessionId 会被存储到客户端的cookie 中")]),t._v(" "),e("h3",{attrs:{id:"cookie-和-session-的区别"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#cookie-和-session-的区别","aria-hidden":"true"}},[t._v("#")]),t._v(" Cookie 和 Session 的区别")]),t._v(" "),e("p",[t._v("安全性： Session 比 Cookie 安全，Session 是存储在服务器端的，Cookie 是存储在客户端的。"),e("br"),t._v("\n存取值的类型不同：Cookie 只支持存字符串数据，想要设置其他类型的数据，需要将其转换成字符串，Session 可以存任意数据类型。"),e("br"),t._v("\n有效期不同： Cookie 可设置为长时间保持，比如我们经常使用的默认登录功能，Session 一般失效时间较短，客户端关闭（默认情况下）或者 Session 超时都会失效。"),e("br"),t._v("\n存储大小不同： 单个 Cookie 保存的数据不能超过 4K，Session 可存储数据远高于 Cookie，但是当访问量过多，会占用过多的服务器资源。")]),t._v(" "),e("h3",{attrs:{id:"什么是-jwt"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#什么是-jwt","aria-hidden":"true"}},[t._v("#")]),t._v(" 什么是 JWT")]),t._v(" "),e("p",[t._v("JSON Web Token（简称 JWT）是目前最流行的跨域认证解决方案。"),e("br"),t._v("\n是一种认证授权机制。"),e("br"),t._v("\nJWT 是为了在网络应用环境间传递声明而执行的一种基于 JSON 的开放标准（RFC 7519）。JWT 的声明一般被用来在身份提供者和服务提供者间传递被认证的用户身份信息，以便于从资源服务器获取资源。比如用在用户登录上。"),e("br"),t._v("\n可以使用 HMAC 算法或者是 RSA 的公/私秘钥对 JWT 进行签名。因为数字签名的存在，这些传递的信息是可信的。")]),t._v(" "),e("h3",{attrs:{id:"token-和-jwt-的区别"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#token-和-jwt-的区别","aria-hidden":"true"}},[t._v("#")]),t._v(" Token 和 JWT 的区别")]),t._v(" "),e("p",[t._v("Token：服务端验证客户端发送过来的 Token 时，还需要查询数据库获取用户信息，然后验证 Token 是否有效。"),e("br"),t._v("\nJWT：将 Token 和 Payload 加密后存储于客户端，服务端只需要使用密钥解密进行校验（校验也是 JWT 自己实现的）即可，不需要查询或者减少查询数据库，因为 JWT 自包含了用户信息和加密的数据。")]),t._v(" "),e("p",[t._v("session面临的问题："),e("br"),t._v("\n负载均衡多服务器的情况，不好确认当前用户是否登录，因为多服务器不共享seesion。这个问题也可以将session存在一个服务器中来解决，但是就不能完全达到负载均衡的效果。"),e("br"),t._v("\n每个客户端只需存储自己的session          id，但是服务端却需要存储所有用户session      id，对服务器也是一个压力"),e("br"),t._v("\ntoken的意思是“令牌”，是用户身份的验证方式，最简单的token组成：sign(签名，经过加密后的数据)，相当于上文提到的session id。token可以放在header、url中，在每次网络访问都携带，一般是写请求头header中。相比于cookie，你可以认为只是存储的地方参数不同而已。token相比于cookie就是有cookie的功能，没有cookie的限制。比如其他客户端不会限制header的cookie。token是cookie很好替代品。")]),t._v(" "),e("p",[t._v("解决方案"),e("br"),t._v("\n针对上面提到问题，人们想到的办法是用token代替cookie和seesion。一个token怎么替代两个的呢？\n服务端把用户信息加密（token）传给客户端，客户端每次访问都返回token，服务端解密token，就知道这个用户是谁了。通过cpu加解密，服务端就不需要存储session id占用存储空间，就很好的解决负载均衡多服务器的问题了")]),t._v(" "),e("h2",{attrs:{id:"localstorage存数据的格式是什么"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#localstorage存数据的格式是什么","aria-hidden":"true"}},[t._v("#")]),t._v(" localstorage存数据的格式是什么")]),t._v(" "),e("p",[t._v("localStorage存储数据的格式都是以字符串的形式来存储的"),e("br"),t._v("\n16怎样将一个数组存入localstorage"),e("br"),t._v("\n17storage有哪些存储方法"),e("br"),t._v("\n读取属性\ngetItem\n18html5的一些新的特性")]),t._v(" "),e("h2",{attrs:{id:"箭头函数"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#箭头函数","aria-hidden":"true"}},[t._v("#")]),t._v(" 箭头函数")]),t._v(" "),e("p",[t._v("引入箭头函数有两个方面的作用：更简短的函数并且不绑定this")]),t._v(" "),e("p",[t._v("箭头函数完全修复了this的指向，this总是指向词法作用域，也就是外层调用者obj.")]),t._v(" "),e("h2",{attrs:{id:"如果一个页面要做性能优化，从哪方面考察，从哪些地方优化"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#如果一个页面要做性能优化，从哪方面考察，从哪些地方优化","aria-hidden":"true"}},[t._v("#")]),t._v(" 如果一个页面要做性能优化，从哪方面考察，从哪些地方优化")]),t._v(" "),e("p",[t._v("https://segmentfault.com/a/1190000010927816")]),t._v(" "),e("h2",{attrs:{id:"请解释原型继承（prototypal-inheritance）的工作原理"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#请解释原型继承（prototypal-inheritance）的工作原理","aria-hidden":"true"}},[t._v("#")]),t._v(" 请解释原型继承（prototypal inheritance）的工作原理")]),t._v(" "),e("p",[t._v("每一个对象都包含一个原型属性，用于关联另一个对象，关联后就能使用那个对象的属性和方法，这就是js的原型式继承。")]),t._v(" "),e("blockquote",[e("p",[t._v("所有 JS 对象都有一个prototype属性，指向它的原型对象。当试图访问一个对象的属性时，")])]),t._v(" "),e("p",[t._v("如果没有在该对象上找到，它还会搜寻该对象的原型，以及该对象的原型的原型，依次层层向上搜索，"),e("br"),t._v("\n直到找到一个名字匹配的属性或到达原型链的末尾。这种行为是在模拟经典的继承，但是与其说是继承，不如说是委托（delegation）。")]),t._v(" "),e("h2",{attrs:{id:"说说你对-amd-和-commonjs-的了解"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#说说你对-amd-和-commonjs-的了解","aria-hidden":"true"}},[t._v("#")]),t._v(" 说说你对 AMD 和 CommonJS 的了解")]),t._v(" "),e("p",[t._v("它们都是实现模块体系的方式，直到 ES2015 出现之前，JavaScript 一直没有模块体系。CommonJS 是同步的，而 AMD（Asynchronous Module Definition）从全称中可以明显看出是异步的。CommonJS 的设计是为服务器端开发考虑的，而 AMD 支持异步加载模块，更适合浏览器。")]),t._v(" "),e("p",[t._v("(前端模块化：CommonJS, AMD, CMD, ES6)")]),t._v(" "),e("h2",{attrs:{id:"埋点的实现思路"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#埋点的实现思路","aria-hidden":"true"}},[t._v("#")]),t._v(" 埋点的实现思路")]),t._v(" "),e("blockquote",[e("p",[t._v("代码埋点、可视化埋点和无痕埋点")])]),t._v(" "),e("p",[t._v("如果埋点的事件较多，或者说网页内部交互频繁，可以通过本地存储的方式先缓存上报信息，然后定期上报。")]),t._v(" "),e("h2",{attrs:{id:"文件上传断点、续传"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#文件上传断点、续传","aria-hidden":"true"}},[t._v("#")]),t._v(" 文件上传断点、续传")]),t._v(" "),e("ol",[e("li",[t._v("把文件按大小1M分割成N份")]),t._v(" "),e("li",[t._v("每次上传时，告诉后台大文件的md5、当前第几份（从0开始）、总共几份")]),t._v(" "),e("li",[t._v("并行上传，前端同时开启5个请求进行传输增加速度")]),t._v(" "),e("li",[t._v("上传失败或出错后，继续上传下一份，把出错的份放在队尾，如果一直出错则中断请求防止死循环")]),t._v(" "),e("li",[t._v("后台接受文件后通过md5进行比对，上次是否接受过此文件，如果接受则跳过，最后进行文件合并出来")])]),t._v(" "),e("h2",{attrs:{id:"vue-react-diff-算法的大概思路"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#vue-react-diff-算法的大概思路","aria-hidden":"true"}},[t._v("#")]),t._v(" VUE/React diff 算法的大概思路")]),t._v(" "),e("blockquote",[e("p",[t._v("react diff 原理")])]),t._v(" "),e("p",[t._v("react中diff算法实现流程:")]),t._v(" "),e("pre",[e("code",[t._v("DOM结构发生改变-----直接卸载并重新create        \nDOM结构一样-----不会卸载,但是会update变化的内容所有同一层级的子节点.他们都可以通过key来区分-----同时遵循1.2两点   (其实这个key的存在与否只会影响diff算法的复杂度,换言之,你不加key的情况下,diff算法就会以暴力的方式去根据一二的策略更新,但是你加了key,diff算法会引入一些另外的操作)       \n")])]),t._v(" "),e("p",[t._v("把树形结构按照层级分解，只比较同级元素。"),e("br"),t._v("\n给列表结构的每个单元添加唯一的 key     属性，方便比较。\nReact 只会匹配相同 class 的 component（这里面的 class 指的是组件的名字）"),e("br"),t._v("\n合并操作，调用 component 的 setState 方法的时候, React 将其标记为 dirty. 到每一个事件循环结束, React 检查所有标记 dirty 的 component 重新绘制.\n选择性子树渲染。"),e("br"),t._v("\n开发人员可以重写 shouldComponentUpdate 提高 diff 的性能。")]),t._v(" "),e("blockquote",[e("p",[t._v("vue中diff算法实现流程：")])]),t._v(" "),e("pre",[e("code",[t._v("1.在内存中构建虚拟dom树     \n2.将内存中虚拟dom树渲染成真实dom结构        \n3.数据改变的时候，将之前的虚拟dom树结合新的数据生成新的虚拟dom树\n")])]),t._v(" "),e("ol",{attrs:{start:"4"}},[e("li",[t._v("将此次生成好的虚拟dom树和上一次的虚拟dom树进行一次比对(diff算法进行比对)，来更新只需要被替换的DOM，而不是全部重绘。在Diff算法中，只平层的比较前后两棵DOM树的节点，没有进行深度的遍历。")])]),t._v(" "),e("pre",[e("code",[t._v("5.会将对比出来的差异进行重新渲染\nvue diff        \n")])]),t._v(" "),e("p",[t._v("当数据发生改变时，set方法会让调用Dep.notify通知所有订阅者Watcher，订阅者就会调用patch给真实的DOM打补丁，更新相应的视图。")]),t._v(" "),e("h2",{attrs:{id:"虚拟dom算法思路"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#虚拟dom算法思路","aria-hidden":"true"}},[t._v("#")]),t._v(" 虚拟DOM算法思路")]),t._v(" "),e("blockquote",[e("p",[t._v("用JS对象模拟DOM树")])]),t._v(" "),e("p",[t._v("比较两棵虚拟DOM树的差异\n把差异应用到真正的DOM树上")]),t._v(" "),e("h2",{attrs:{id:"webpack中-loader、plugin-的实现思路"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#webpack中-loader、plugin-的实现思路","aria-hidden":"true"}},[t._v("#")]),t._v(" webpack中 loader、plugin 的实现思路")]),t._v(" "),e("p",[t._v("Loader: 能把源文件经过转化后输出新的结果\nWebpack通过Plugin机制让其更加灵活，以适应各种应用场景。 在Webpack运行的生命周期中会广播出许多事件，Plugin可以监听这些事件，在合适的时机通过Webpack提供的API改变输出结果。")]),t._v(" "),e("h2",{attrs:{id:"前端构建工具的、vue-cli、create-react-app-的原理和实现思路"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#前端构建工具的、vue-cli、create-react-app-的原理和实现思路","aria-hidden":"true"}},[t._v("#")]),t._v(" 前端构建工具的、vue-cli、create-react-app 的原理和实现思路")]),t._v(" "),e("p",[e("img",{attrs:{src:"https://pic2.zhimg.com/80/v2-b487d3a06dbf5ddf8caab18f13616485_hd.jpg",alt:"vue-cli"}})]),t._v(" "),e("h2",{attrs:{id:"事件委托？原理、好处、应用场景。"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#事件委托？原理、好处、应用场景。","aria-hidden":"true"}},[t._v("#")]),t._v(" 事件委托？原理、好处、应用场景。")]),t._v(" "),e("p",[t._v("事件委托是将事件监听器添加到父元素，而不是每个子元素单独设置事件监听器。当触发子元素时，事件会冒泡到父元素，监听器就会触发。"),e("br"),t._v("\n这种技术的好处是：\n内存占用减少，因为只需要一个父元素的事件处理程序，而不必为每个后代都添加事件处理程序。\n无需从已删除的元素中解绑处理程序，也无需将处理程序绑定到新元素上。")]),t._v(" "),e("h2",{attrs:{id:"vue和react的区别。"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#vue和react的区别。","aria-hidden":"true"}},[t._v("#")]),t._v(" vue和react的区别。")]),t._v(" "),e("p",[t._v("1.react整体的思路就是函数式，所以推崇纯组件，数据不可变，单向数据流.\n而vue是基于可变数据的，支持双向绑定.\n2.vue内置了很多功能，而react做的很少，很多都是由社区来完成的，vue追求的是开发的简单，而react更在乎方式是否正确。")]),t._v(" "),e("h2",{attrs:{id:"vuex的原理"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#vuex的原理","aria-hidden":"true"}},[t._v("#")]),t._v(" VUEX的原理")]),t._v(" "),e("p",[t._v("vuex 中的 store 本质就是没有 template 的隐藏着的 vue 组件")]),t._v(" "),e("h2",{attrs:{id:"闭包"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#闭包","aria-hidden":"true"}},[t._v("#")]),t._v(" 闭包")]),t._v(" "),e("blockquote",[e("p",[t._v("闭包是函数和声明该函数的词法环境的组合。")])]),t._v(" "),e("p",[t._v("词法作用域中使用的域，是变量在代码中声明的位置所决定的。闭包是即使被外部函数返回，依然可以访问到外部（封闭）函数作用域的函数。"),e("br"),t._v("\n为什么使用闭包？"),e("br"),t._v("\n利用闭包实现数据私有化或模拟私有方法。这个方式也称为模块模式（module pattern）。"),e("br"),t._v("\n部分参数函数（partial applications）柯里化（currying）.")]),t._v(" "),e("h2",{attrs:{id:"匿名函数的典型应用场景是什么"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#匿名函数的典型应用场景是什么","aria-hidden":"true"}},[t._v("#")]),t._v(" 匿名函数的典型应用场景是什么")]),t._v(" "),e("p",[t._v("匿名函数可以在 IIFE 中使用，来封装局部作用域内的代码，以便其声明的变量不会暴露到全局作用域。")]),t._v(" "),e("p",[t._v("(function() {\n// 一些代码。\n})();\n匿名函数可以作为只用一次，不需要在其他地方使用的回调函数。\n当处理函数在调用它们的程序内部被定义时，代码具有更好地自闭性和可读性，可以省去寻找该处理函数的函数体位置的麻烦。"),e("br"),t._v("\n匿名函数可以用于函数式编程或 Lodash（类似于回调函数）。")]),t._v(" "),e("h2",{attrs:{id:"宿主对象（hostbjects）和原生对象（native-objects）的区别是什么"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#宿主对象（hostbjects）和原生对象（native-objects）的区别是什么","aria-hidden":"true"}},[t._v("#")]),t._v(" 宿主对象（hostbjects）和原生对象（native objects）的区别是什么")]),t._v(" "),e("ol",[e("li",[e("p",[t._v("原生对象是由 ECMAScript 规范定义的 JavaScript 内置对象，比如String、Math、RegExp、Object、Function等等。")])]),t._v(" "),e("li",[e("p",[t._v("宿主对象是由运行时环境（浏览器或 Node）提供，比如window、XMLHTTPRequest等等。")])])]),t._v(" "),e("h2",{attrs:{id:"call和-apply有什么区别？"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#call和-apply有什么区别？","aria-hidden":"true"}},[t._v("#")]),t._v(" call和.apply有什么区别？")]),t._v(" "),e("p",[t._v(".call和.apply都用于调用函数，")]),t._v(" "),e("p",[t._v("第一个参数将用作函数内 this 的值。然而，\n.call接受逗号分隔的参数作为后面的参数，而.apply接受一个参数数组作为后面的参数。一个简单的记忆方法是，\n从call中的 C 联想到逗号分隔（comma-separated），从apply中的 A 联想到数组（array）。\nfunction add(a, b) {\nreturn a + b;\n}\nconsole.log(add.call(null, 1, 2)); // 3\nconsole.log(add.apply(null, [1, 2])); // 3")]),t._v(" "),e("h2",{attrs:{id:"功能检测（feature-detection）、功能推断（feature-inference）和使用-ua-字符串之间有什么区别？"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#功能检测（feature-detection）、功能推断（feature-inference）和使用-ua-字符串之间有什么区别？","aria-hidden":"true"}},[t._v("#")]),t._v(" 功能检测（feature detection）、功能推断（feature inference）和使用 UA 字符串之间有什么区别？")]),t._v(" "),e("p",[t._v('功能检测包括确定浏览器是否支持某段代码，以及是否运行不同的代码（取决于它是否执行），以便浏览器始终能够正常运行代码功能，而不会在某些浏览器中出现崩溃和错误。例如：\nif ("geolocation" in navigator) {\n// 可以使用 navigator.geolocation\n} else {\n// 处理 navigator.geolocation 功能缺失\n}\nModernizr是处理功能检测的优秀工具。\n功能推断与功能检测一样，会对功能可用性进行检查，但是在判断通过后，还会使用其他功能，因为它假设其他功能也可用.\nUA 字符串这是一个浏览器报告的字符串，它允许网络协议对等方（network protocol peers）识别请求用户代理的应用类型、操作系统、应用供应商和应用版本。它可以通过navigator.userAgent访问。')]),t._v(" "),e("h2",{attrs:{id:"单页应用有那些优缺点"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#单页应用有那些优缺点","aria-hidden":"true"}},[t._v("#")]),t._v(" 单页应用有那些优缺点")]),t._v(" "),e("p",[t._v("好处：\n用户感知响应更快，用户切换页面时，不再看到因页面刷新而导致的白屏。"),e("br"),t._v("\n对服务器进行的 HTTP      请求减少，因为对于每个页面加载，不必再次下载相同的资源。"),e("br"),t._v("\n客户端和服务器之间的关注点分离。可以为不同平台（例如手机、聊天机器人、智能手表）建立新的客户端，而无需修改服务器代码。只要 API 没有修改，可以单独修改客户端和服务器上的代码。\n坏处："),e("br"),t._v("\n由于加载了多个页面所需的框架、应用代码和资源，导致初始页面加载时间较长。"),e("br"),t._v("\n服务器还需要进行额外的工作，需要将所有请求路由配置到单个入口点，然后由客户端接管路由。"),e("br"),t._v("\nSPA 依赖于 JavaScript        来呈现内容，但并非所有搜索引擎都在抓取过程中执行 JavaScript，他们可能会在你的页面上看到空的内容。"),e("br"),t._v("\n这无意中损害了应用的搜索引擎优化（SEO）。然而，当你构建应用时，大多数情况下，搜索引擎优化并不是最重要的因素，因为并非所有内容都需要通过搜索引擎进行索引。"),e("br"),t._v("\n为了解决这个问题，可以在服务器端渲染你的应用，或者使用诸如 Prerender 的服务来“在浏览器中呈现你的 javascript，保存静态 HTML，并将其返回给爬虫”。")]),t._v(" "),e("h2",{attrs:{id:"请说明-jsonp-的工作原理，它为什么不是真正的-ajax？"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#请说明-jsonp-的工作原理，它为什么不是真正的-ajax？","aria-hidden":"true"}},[t._v("#")]),t._v(" 请说明 JSONP 的工作原理，它为什么不是真正的 Ajax？")]),t._v(" "),e("p",[t._v("JSONP（带填充的 JSON）是一种通常用于绕过 Web 浏览器中的跨域限制的方法，因为 Ajax 不允许跨域请求。")]),t._v(" "),e("p",[t._v("JSONP 通过script标签发送跨域请求，通常使用callback查询参数，例如：https://example.com?callback=printData。"),e("br"),t._v("\n然后服务器将数据包装在一个名为printData的函数中并将其返回给客户端。\n"),e("script",[t._v("\nfunction printData(data) {</p>\n<pre><code>console.log( `My name is ${data.name}!` );\n</code></pre>\n<p>}\n")]),t._v(" "),e("script",{attrs:{src:"https://example.com?callback=printData"}}),t._v('\nprintData({ name: "Yang Shun" });\n客户端必须在其全局范围内具有printData函数，并且在收到来自跨域的响应时，该函数将由客户端执行。\nJSONP 可能具有一些安全隐患。由于 JSONP 是纯 JavaScript 实现，它可以完成 JavaScript 所能做的一切，因此需要信任 JSONP 数据的提供者。\n现如今，跨来源资源共享（CORS） 是推荐的主流方式，JSONP 已被视为一种比较 hack 的方式。')]),t._v(" "),e("h2",{attrs:{id:"attribute-和-property-之间有什么区别？"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#attribute-和-property-之间有什么区别？","aria-hidden":"true"}},[t._v("#")]),t._v(' "attribute" 和 "property" 之间有什么区别？')]),t._v(" "),e("p",[t._v("“Attribute” 是在 HTML 中定义的，\n而 “property” 是在 DOM 上定义的。")]),t._v(" "),e("h2",{attrs:{id:"document-中的load事件和domcontentloaded事件之间的区别是什么？"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#document-中的load事件和domcontentloaded事件之间的区别是什么？","aria-hidden":"true"}},[t._v("#")]),t._v(" document 中的load事件和DOMContentLoaded事件之间的区别是什么？")]),t._v(" "),e("p",[t._v("当初始的 HTML 文档被完全加载和解析完成之后，DOMContentLoaded事件被触发，而无需等待样式表、图像和子框架的完成加载。")]),t._v(" "),e("p",[t._v("window的load事件仅在 DOM 和所有相关资源全部完成加载后才会触发。")]),t._v(" "),e("h2",{attrs:{id:"什么是-use-strict-？使用它有什么优缺点？"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#什么是-use-strict-？使用它有什么优缺点？","aria-hidden":"true"}},[t._v("#")]),t._v(' 什么是"use strict"; ？使用它有什么优缺点？')]),t._v(" "),e("p",[t._v("use strict' 是用于对整个脚本或单个函数启用严格模式的语句。严格模式是可选择的一个限制 JavaScript 的变体一种方式 。")]),t._v(" "),e("p",[t._v("优点："),e("br"),t._v("\n无法再意外创建全局变量。"),e("br"),t._v("\n会使引起静默失败（silently fail，即：不报错也没有任何效果）的赋值操抛出异常。"),e("br"),t._v("\n试图删除不可删除的属性时会抛出异常（之前这种操作不会产生任何效果）。"),e("br"),t._v("\n要求函数的参数名唯一。"),e("br"),t._v("\n全局作用域下，this的值为undefined。"),e("br"),t._v("\n捕获了一些常见的编码错误，并抛出异常。"),e("br"),t._v("\n缺点："),e("br"),t._v("\n无法访问function.caller和function.arguments。\n以不同严格模式编写的脚本合并后可能导致问题。")]),t._v(" "),e("h2",{attrs:{id:"什么是事件循环？调用堆栈和任务队列之间有什么区别？"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#什么是事件循环？调用堆栈和任务队列之间有什么区别？","aria-hidden":"true"}},[t._v("#")]),t._v(" 什么是事件循环？调用堆栈和任务队列之间有什么区别？")]),t._v(" "),e("blockquote",[e("p",[t._v("事件循环是一个单线程循环，用于监视调用堆栈并检查是否有工作即将在任务队列中完成。")])]),t._v(" "),e("p",[t._v("如果调用堆栈为空并且任务队列中有回调函数，则将回调函数出队并推送到调用堆栈中执行。")]),t._v(" "),e("h2",{attrs:{id:"let和var的区别。let产生的背景？"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#let和var的区别。let产生的背景？","aria-hidden":"true"}},[t._v("#")]),t._v(" let和var的区别。let产生的背景？")]),t._v(" "),e("p",[t._v("用var声明的变量的作用域是它当前的执行上下文，它可以是嵌套的函数，也可以是声明在任何函数外的变量。")]),t._v(" "),e("p",[t._v("let和const是块级作用域，意味着它们只能在最近的一组花括号（function、if-else 代码块或 for 循环中）中访问。"),e("br"),t._v("\n为什么会添加这个块级作用域，就得了解ES5没有块级作用域时出现的问题。"),e("br"),t._v("\n场景一是内层变量可能会覆盖外层变量。"),e("br"),t._v("\n场景二是在if或者是for循环中声明的变量会泄漏成为全局变量。")]),t._v(" "),e("h2",{attrs:{id:"请阐述块格式化上下文（block-formatting-context）及其工作原理。"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#请阐述块格式化上下文（block-formatting-context）及其工作原理。","aria-hidden":"true"}},[t._v("#")]),t._v(" 请阐述块格式化上下文（Block Formatting Context）及其工作原理。")]),t._v(" "),e("p",[t._v("块格式上下文（BFC）是 Web 页面的可视化 CSS 渲染的部分，是块级盒布局发生的区域，也是浮动元素与其他元素交互的区域。\n一个 HTML 盒（Box）满足以下任意一条，会创建块格式化上下文：\nfloat的值不是none.\nposition的值不是static或relative.\ndisplay的值是table-cell、table-caption、inline-block、flex、或inline-flex。\noverflow的值不是visible。\n在 BFC 中，每个盒的左外边缘都与其包含的块的左边缘相接。\n两个相邻的块级盒在垂直方向上的边距会发生合并（collapse）。更多内容请参考边距合并（margin collapsing）。")]),t._v(" "),e("h2",{attrs:{id:"有什么不同的方式可以隐藏内容（使其仅适用于屏幕阅读器）"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#有什么不同的方式可以隐藏内容（使其仅适用于屏幕阅读器）","aria-hidden":"true"}},[t._v("#")]),t._v(" 有什么不同的方式可以隐藏内容（使其仅适用于屏幕阅读器）")]),t._v(" "),e("p",[t._v("visibility: hidden：元素仍然在页面流中，并占用空间。"),e("br"),t._v("\nwidth: 0; height:        0：使元素不占用屏幕上的任何空间，导致不显示它。\nposition: absolute; left: -99999px： 将它置于屏幕之外。"),e("br"),t._v("\ntext-indent: -9999px：这只适用于block元素中的文本。\nMetadata： 例如通过使用 Schema.org，RDF 和 JSON-LD。"),e("br"),t._v("\nWAI-ARIA：如何增加网页可访问性的 W3C 技术规范。")]),t._v(" "),e("h2",{attrs:{id:"使用-css-预处理的优缺点分别是什么"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#使用-css-预处理的优缺点分别是什么","aria-hidden":"true"}},[t._v("#")]),t._v(" 使用 CSS 预处理的优缺点分别是什么")]),t._v(" "),e("p",[t._v("优点：")]),t._v(" "),e("p",[t._v("提高 CSS 可维护性。"),e("br"),t._v("\n易于编写嵌套选择器。"),e("br"),t._v("\n引入变量，增添主题功能。可以在不同的项目中共享主题文件。"),e("br"),t._v("\n通过混合（Mixins）生成重复的 CSS。"),e("br"),t._v("\n将代码分割成多个文件。不进行预处理的CSS，虽然也可以分割成多个文件，但需要建立多个 HTTP 请求加载这些文件。"),e("br"),t._v("\n缺点："),e("br"),t._v("\n需要预处理工具。"),e("br"),t._v("\n重新编译的时间可能会很慢。")]),t._v(" "),e("h2",{attrs:{id:"什么情况下，用translate-而不用绝对定位？什么时候，情况相反"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#什么情况下，用translate-而不用绝对定位？什么时候，情况相反","aria-hidden":"true"}},[t._v("#")]),t._v(" 什么情况下，用translate()而不用绝对定位？什么时候，情况相反")]),t._v(" "),e("p",[t._v("translate()是transform的一个值。改变transform或opacity不会触发浏览器重新布局（reflow）或重绘（repaint），"),e("br"),t._v("\n只会触发复合（compositions）。而改变绝对定位会触发重新布局，进而触发重绘和复合。transform使浏览器为元素创建一个 GPU 图层，"),e("br"),t._v("\n但改变绝对定位会使用到 CPU。因此translate()更高效，可以缩短平滑动画的绘制时间。"),e("br"),t._v("\n当使用translate()时，元素仍然占据其原始空间（有点像position：relative），这与改变绝对定位不同。")]),t._v(" "),e("h2",{attrs:{id:"请简述javascript中的this"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#请简述javascript中的this","aria-hidden":"true"}},[t._v("#")]),t._v(" 请简述JavaScript中的this")]),t._v(" "),e("p",[t._v("粗略地讲，函数的调用方式决定了this的值。this取值符合以下规则：")]),t._v(" "),e("p",[t._v("在调用函数时使用new关键字，函数内的this是一个全新的对象。"),e("br"),t._v("\n如果apply、call或bind方法用于调用、创建一个函数，函数内的 this 就是作为参数传入这些方法的对象。"),e("br"),t._v("\n当函数作为对象里的方法被调用时，函数内的this是调用该函数的对象。比如当obj.method()被调用时，函数内的 this 将绑定到obj对象。"),e("br"),t._v("\n如果调用函数不符合上述规则，那么this的值指向全局对象（global object）。浏览器环境下this的值指向window对象，但是在严格模式下('use strict')，this的值为undefined。"),e("br"),t._v("\n如果符合上述多个规则，则较高的规则（1 号最高，4 号最低）将决定this的值。"),e("br"),t._v("\n如果该函数是 ES2015      中的箭头函数，将忽略上面的所有规则，this被设置为它被创建时的上下文。")]),t._v(" "),e("h2",{attrs:{id:"在浏览器中，一个页面从输入url到加载完成，都有哪些步骤"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#在浏览器中，一个页面从输入url到加载完成，都有哪些步骤","aria-hidden":"true"}},[t._v("#")]),t._v(" 在浏览器中，一个页面从输入URL到加载完成，都有哪些步骤")]),t._v(" "),e("ol",[e("li",[t._v("域名解析")]),t._v(" "),e("li",[t._v("建立TCP连接，浏览器与服务器经过3次握手后建立连接")]),t._v(" "),e("li",[t._v("浏览器发起HTTP气球，获取资源/*-")]),t._v(" "),e("li",[t._v("服务器响应HTTP气球")]),t._v(" "),e("li",[t._v("浏览器渲染")])]),t._v(" "),e("h2",{attrs:{id:"http1-1-有哪些不足"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#http1-1-有哪些不足","aria-hidden":"true"}},[t._v("#")]),t._v(" HTTP1.1 有哪些不足")]),t._v(" "),e("ol",[e("li",[t._v("出现队首阻塞问题")]),t._v(" "),e("li",[t._v("响应不分轻重缓急，只会先来后到")]),t._v(" "),e("li",[t._v("并行需要建立多个TCP")]),t._v(" "),e("li",[t._v("只能被动等待客户端发起请求")]),t._v(" "),e("li",[t._v("HTTP是无状态的，每次请求和响应都会携带大量冗余信息")])]),t._v(" "),e("h2",{attrs:{id:"用new-运算符创建对象时，具体的创建过程有哪几步"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#用new-运算符创建对象时，具体的创建过程有哪几步","aria-hidden":"true"}},[t._v("#")]),t._v(" 用new 运算符创建对象时，具体的创建过程有哪几步")]),t._v(" "),e("ol",[e("li",[t._v("一个新对象被创建，它继承自构造函数的原型")]),t._v(" "),e("li",[t._v("将指定的参数传递给构造函数")]),t._v(" "),e("li",[t._v("将执行上下文（this）绑定到新创建的对象中")]),t._v(" "),e("li",[t._v("如果构造函数有返回值，那么返回值将取代第一步中新创建的对象")])]),t._v(" "),e("h2",{attrs:{id:"isprototypeof方法与instanceof-运算符有哪些区别"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#isprototypeof方法与instanceof-运算符有哪些区别","aria-hidden":"true"}},[t._v("#")]),t._v(" isPrototypeOf方法与instanceof 运算符有哪些区别")]),t._v(" "),e("p",[t._v("isPrototypeOf 用于检测调用此方法对象是否存在于指定对象的原型链中，`\n而instanceof用于检测构造函数的原型是否存在于指定对象的原型链")]),t._v(" "),e("h2",{attrs:{id:"请介绍一下节流函数和防抖函数，简单实现节流函数和防抖函数"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#请介绍一下节流函数和防抖函数，简单实现节流函数和防抖函数","aria-hidden":"true"}},[t._v("#")]),t._v(" 请介绍一下节流函数和防抖函数，简单实现节流函数和防抖函数")]),t._v(" "),e("p",[t._v("他们都是可以防止一个函数被无意义的高频率调用\n区别在于:\n函数节流：是确保函数特定的时间内至多执行一次。\n函数防抖：是函数在特定的时间内不被再调用后执行。")]),t._v(" "),e("h2",{attrs:{id:"请介绍一下回流（reflow）与重绘（repaint）"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#请介绍一下回流（reflow）与重绘（repaint）","aria-hidden":"true"}},[t._v("#")]),t._v(" 请介绍一下回流（Reflow）与重绘（Repaint）")]),t._v(" "),e("p",[t._v("回流（Reflow）：render       树中的一部分(或全部)因为元素的规模尺寸，布局，隐藏等改变而需要重新构建。回流的时候，浏览器会使渲染树中受到影响的部分失效，并重新构造这部分渲染树，完成回流后，浏览器会重新绘制受影响的部分到屏幕中，该过程称为重绘。")]),t._v(" "),e("p",[t._v("重绘：render tree中的一些元素需要更新属性，而这些属性只是影响元素的外观，风格，而不会影响 render 树重新布局的，比如修改字体颜色。"),e("br"),t._v("\n注意：回流一定会触发重绘，而重绘不一定会回流。")]),t._v(" "),e("h2",{attrs:{id:"请描述一下什么是执行栈"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#请描述一下什么是执行栈","aria-hidden":"true"}},[t._v("#")]),t._v(" 请描述一下什么是执行栈")]),t._v(" "),e("p",[t._v("可以把执行栈认为是一个存储函数调用的栈结构，它遵从先进后出的原则。")]),t._v(" "),e("h2",{attrs:{id:"vue通信"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#vue通信","aria-hidden":"true"}},[t._v("#")]),t._v(" Vue通信")]),t._v(" "),e("p",[t._v("1.props和$emit")]),t._v(" "),e("ol",{attrs:{start:"2"}},[e("li",[t._v("EventBus(基本不用)")])]),t._v(" "),e("p",[t._v("3.vuex")]),t._v(" "),e("p",[e("a",{attrs:{href:"http://react-china.org/t/topic/33558",target:"_blank",rel:"noopener noreferrer"}},[t._v("react"),e("OutboundLink")],1),e("br"),t._v(" "),e("a",{attrs:{href:"https://github.com/sudheerj/reactjs-interview-questions",target:"_blank",rel:"noopener noreferrer"}},[t._v("react-github"),e("OutboundLink")],1)]),t._v(" "),e("h2",{attrs:{id:"斐波那契数列？怎么优化？"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#斐波那契数列？怎么优化？","aria-hidden":"true"}},[t._v("#")]),t._v(" 斐波那契数列？怎么优化？")]),t._v(" "),e("p",[t._v("每一项是前两项之和, 递归结束条件是f[1]=1，f[2]=1"),e("br"),t._v("\n1，2，3，5，8，13，21，34"),e("br"),t._v("\nF(n)=F(n-1)+F(n-2)"),e("br"),t._v("\n方法1（递归）"),e("br"),t._v("\n时间复杂度：O（N2），空间复杂度：O（N）"),e("br"),t._v("\n方法2（循环）"),e("br"),t._v("\n时间复杂度：O（N），时间复杂度：O（1）")]),t._v(" "),e("h2",{attrs:{id:"node主要用来解决什么问题，node做bff的优点是什么"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#node主要用来解决什么问题，node做bff的优点是什么","aria-hidden":"true"}},[t._v("#")]),t._v(" node主要用来解决什么问题，node做BFF的优点是什么")]),t._v(" "),e("p",[t._v("node中间层解决SEO, 首屏渲染, 前后端分离,\n服务器之间内网请求接口速度比请求快。\nnode: 高并发，异步IO\n每个Node.js进程可以支持超过12万活跃的连接，每个连接消耗大约2K的内存"),e("br"),t._v("\n加了中间层一方面是为了不让前台直接性的去访问主要逻辑接口，\nnode中间层可以过滤、合并请求，这样来减少主要数据接口服务器的性能消耗 。")]),t._v(" "),e("h2",{attrs:{id:"对项目监控这块有什么了解吗"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#对项目监控这块有什么了解吗","aria-hidden":"true"}},[t._v("#")]),t._v(" 对项目监控这块有什么了解吗")]),t._v(" "),e("p",[t._v("一个监控系统，大致可以分为四个阶段：日志采集、日志存储、统计与分析、报告和警告。")]),t._v(" "),e("h2",{attrs:{id:"对微服务有了解吗"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#对微服务有了解吗","aria-hidden":"true"}},[t._v("#")]),t._v(" 对微服务有了解吗")]),t._v(" "),e("p",[t._v("微服务的目的是有效的拆分应用，实现敏捷开发和部署"),e("br"),t._v("\n使用 HTTP 服务器的路由来重定向多个应用"),e("br"),t._v("\n在不同的框架之上设计通讯、加载机制，诸如 Mooa 和 Single-SPA"),e("br"),t._v("\n通过组合多个独立应用、组件来构建一个单体应用"),e("br"),t._v("\niFrame。使用 iFrame 及自定义消息传递机制"),e("br"),t._v("\n使用纯 Web Components 构建应用"),e("br"),t._v("\n结合 Web Components 构建")]),t._v(" "),e("h2",{attrs:{id:"restful接口架构的优缺点-restful接口架构会导致什么安全问题，具体怎么解决"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#restful接口架构的优缺点-restful接口架构会导致什么安全问题，具体怎么解决","aria-hidden":"true"}},[t._v("#")]),t._v(" restful接口架构的优缺点, restful接口架构会导致什么安全问题，具体怎么解决")]),t._v(" "),e("p",[t._v("RESTful架构优点：\n前后端分离，减少流量"),e("br"),t._v("\n安全问题集中在接口上，由于接受json格式，防止了注入型等安全问题"),e("br"),t._v("\n前端无关化，后端只负责数据处理，前端表现方式可以是任何前端语言（android，ios, html5）"),e("br"),t._v("\n前端和后端人员更加专注于各自开发，只需接口文档便可完成前后端交互，无需过多相互了解"),e("br"),t._v("\n服务器性能优化：由于前端是静态页面，通过nginx便可获取，服务器主要压力放在了接口上"),e("br"),t._v("\nRESTful优点\nURL具有很强可读性的，具有自描述性\n可提供OpenAPI，便于第三方系统集成，提高互操作性；\nRESTful的缺点\n请求路径将表内关系完全暴露，响应结果将表结构暴露")]),t._v(" "),e("h2",{attrs:{id:"webpack性能优化你知道哪些"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#webpack性能优化你知道哪些","aria-hidden":"true"}},[t._v("#")]),t._v(" Webpack性能优化你知道哪些")]),t._v(" "),e("ol",[e("li",[t._v("优化Loader的文件搜索范围")]),t._v(" "),e("li",[t._v("把Babel编译过的文件缓存起来 loader: 'babel-loader?cacheDirectory=ture'")]),t._v(" "),e("li",[t._v("HappyPack可以将Loader的同步执行转换为并行的")]),t._v(" "),e("li",[t._v("DllPlugin可以将特定的类库提前打包然后引入。这种方式可以极大的减少打包类库的次数，只有当类库更新版本才有需要重新打包，并且也实现了将公共代码抽离成单独文件的优化方案.")]),t._v(" "),e("li",[t._v("Scope Hoisting会分析出模块之间的依赖关系，尽可能的把打包出来的模块合并到一个函数中去。")]),t._v(" "),e("li",[t._v("Tree Shaking 可以实现删除项目中未被引用的代码")])]),t._v(" "),e("h2",{attrs:{id:"如何设计一个组件？"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#如何设计一个组件？","aria-hidden":"true"}},[t._v("#")]),t._v(" 如何设计一个组件？")]),t._v(" "),e("p",[t._v('组件聚合原则告诉我们设计组件时要考虑的原则，以及如何根据项目的开发时间和成熟度对这些原则进行权衡。组件耦合考虑的是如何管理组件之间的依赖关系，减小组件之间的耦合，组件依赖要考虑的问题。从组件聚合和组件耦合全面分析，可以设计出"高内聚、低耦合"的组件。')]),t._v(" "),e("p",[t._v("适用单一职责原则\n适用开放封闭原则\n追求短小精悍\n避免太多参数\n缩小信赖范围和向稳定方向信赖"),e("br"),t._v("\n追求无副作用\n追求引用透明\n避免暴露组件内部实现\n避免直接操作DOM\n入口处检查参数的有效性，出口处检查返回的正确性\n充分隔离变化的部分"),e("br"),t._v("\n组件和数据分享，信赖一致性的数据结构")]),t._v(" "),e("h2",{attrs:{id:"code-split-怎么做？"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#code-split-怎么做？","aria-hidden":"true"}},[t._v("#")]),t._v(" code split 怎么做？")]),t._v(" "),e("p",[t._v("主要有 2 种方式：\n分离业务代码和第三方库（ vendor ）"),e("br"),t._v("\n按需加载（利用 import() 语法）")]),t._v(" "),e("h2",{attrs:{id:"什么是treeshaking？注意些什么？"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#什么是treeshaking？注意些什么？","aria-hidden":"true"}},[t._v("#")]),t._v(" 什么是treeshaking？注意些什么？")]),t._v(" "),e("p",[t._v("Tree-shaking的本质是消除无用的js代码")]),t._v(" "),e("h2",{attrs:{id:"一像素问题怎么解决？"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#一像素问题怎么解决？","aria-hidden":"true"}},[t._v("#")]),t._v(" 一像素问题怎么解决？")]),t._v(" "),e("p",[t._v("由于分辨率 DPI 的差异，高清手机屏上的 1px 实际上是由 2×2 个像素点来渲染，有的屏幕甚至用到了 3×3 个像素点\n所以在实际的代码实现中，设置1px的边框，会渲染成2px.")]),t._v(" "),e("ol",[e("li",[t._v("使用transform： scale +媒体查询")]),t._v(" "),e("li",[t._v("直接rem设置")])]),t._v(" "),e("h2",{attrs:{id:"css：区别-px、em、rem"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#css：区别-px、em、rem","aria-hidden":"true"}},[t._v("#")]),t._v(" CSS：区别 px、em、rem")]),t._v(" "),e("p",[t._v("px 在缩放页面时无法调整那些使用它作为单位的字体、按钮等的大小；")]),t._v(" "),e("p",[t._v("em 的值并不是固定的，会继承父级元素的字体大小，代表倍数；")]),t._v(" "),e("p",[t._v("rem 的值并不是固定的，始终是基于根元素 ")]),e("html",[t._v(" 的，也代表倍数。"),e("p"),t._v(" "),e("h2",{attrs:{id:"ios滑动不流畅"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#ios滑动不流畅","aria-hidden":"true"}},[t._v("#")]),t._v(" ios滑动不流畅")]),t._v(" "),e("p",[t._v("-webkit-overflow-scrolling: touch; /* 当手指从触摸屏上移开，会保持一段时间的滚动 */")]),t._v(" "),e("p",[t._v("-webkit-overflow-scrolling: auto; /* 当手指从触摸屏上移开，滚动会立即停止 */")]),t._v(" "),e("h2",{attrs:{id:"ios-上拉边界下拉出现白色空白"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#ios-上拉边界下拉出现白色空白","aria-hidden":"true"}},[t._v("#")]),t._v(" iOS 上拉边界下拉出现白色空白")]),t._v(" "),e("ol",[e("li",[t._v("通过监听 touchmove，让需要滑动的地方滑动，不需要滑动的地方禁止滑动。")]),t._v(" "),e("li",[t._v("填充一些元素：下拉后刷新页面")])]),t._v(" "),e("h2",{attrs:{id:"软键盘将页面顶起来、收起未回落"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#软键盘将页面顶起来、收起未回落","aria-hidden":"true"}},[t._v("#")]),t._v(" 软键盘将页面顶起来、收起未回落")]),t._v(" "),e("p",[t._v("安卓一些版本中，输入弹窗出来，会将解压 absolute 和 fixed 定位的元素。导致可视区域变小，布局错乱。\n软键盘将页面顶起来的解决方案，主要是通过监听页面高度变化，强制恢复成弹出前的高度。\n键盘不能回落问题出现在 iOS 12+ 和 wechat 6.7.4+ 中，而在微信 H5 开发中是比较常见的 Bug。")]),t._v(" "),e("h2",{attrs:{id:"iphone-x系列安全区域适配问题"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#iphone-x系列安全区域适配问题","aria-hidden":"true"}},[t._v("#")]),t._v(" iPhone X系列安全区域适配问题")]),t._v(" "),e("p",[t._v("viewport-fit meta 标签设置为 cover，获取所有区域填充。判断设备是否属于 iPhone X，给头部底部增加适配层")]),t._v(" "),e("p",[t._v("viewport-fit 有 3 个值分别为：")]),t._v(" "),e("p",[t._v("auto：此值不影响初始布局视图端口，并且整个web页面都是可查看的。")]),t._v(" "),e("p",[t._v("contain：视图端口按比例缩放，以适合显示内嵌的最大矩形。")]),t._v(" "),e("p",[t._v("cover：视图端口被缩放以填充设备显示。强烈建议使用 safe area inset 变量，以确保重要内容不会出现在显示之外。\n增加适配层\n使用 safe area inset 变量")]),t._v(" "),e("p",[t._v("/* 适配 iPhone X 顶部填充*/\n@supports (top: env(safe-area-inset-top)){\nbody,\n.header{\npadding-top: constant(safe-area-inset-top, 40px);\npadding-top: env(safe-area-inset-top, 40px);\npadding-top: var(safe-area-inset-top, 40px);\n}\n}\n/* 判断iPhoneX 将 footer 的 padding-bottom 填充到最底部 */\n@supports (bottom: env(safe-area-inset-bottom)){\nbody,\n.footer{\npadding-bottom: constant(safe-area-inset-bottom, 20px);\npadding-bottom: env(safe-area-inset-bottom, 20px);\npadding-top: var(safe-area-inset-bottom, 20px);\n}\n}\nsafe-area-inset-top, safe-area-inset-right, safe-area-inset-bottom, safe-area-inset-left safe-area-inset-*由四个定义了视口边缘内矩形的 top, right, bottom 和 left 的环境变量组成，这样可以安全地放入内容，而不会有被非矩形的显示切断的风险。对于矩形视口，例如普通的笔记本电脑显示器，其值等于零。对于非矩形显示器（如圆形表盘，iPhoneX 屏幕），在用户代理设置的四个值形成的矩形内，所有内容均可见。")]),t._v(" "),e("p",[t._v("其中 env() 用法为 env( "),e("custom-ident",[t._v(" , "),e("declaration-value",[t._v("? )，第一个参数为自定义的区域，第二个为备用值。")])],1)],1),t._v(" "),e("p",[t._v("其中 var() 用法为 var( "),e("custom-property-name",[t._v(" , "),e("declaration-value",[t._v("? )，作用是在 env() 不生效的情况下，给出一个备用值。")])],1)],1),t._v(" "),e("p",[t._v("constant（） 被 css 2017-2018 年为草稿阶段，是否已被标准化未知。而其他iOS 浏览器版本中是否有此函数未知，作为兼容处理而添加进去。")]),t._v(" "),e("h2",{attrs:{id:"jsbridge原理是什么？如何设计一个jsbridge？"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#jsbridge原理是什么？如何设计一个jsbridge？","aria-hidden":"true"}},[t._v("#")]),t._v(" JSBridge原理是什么？如何设计一个JSBridge？")]),t._v(" "),e("h2",{attrs:{id:"离线包怎么设计？"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#离线包怎么设计？","aria-hidden":"true"}},[t._v("#")]),t._v(" 离线包怎么设计？")]),t._v(" "),e("h2",{attrs:{id:"hybrid-h5开发需要注意些什么？"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#hybrid-h5开发需要注意些什么？","aria-hidden":"true"}},[t._v("#")]),t._v(" Hybrid  H5开发需要注意些什么？")]),t._v(" "),e("p",[t._v("WebView内存泄漏")]),t._v(" "),e("h2",{attrs:{id:"webview的缓存机制是什么？"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#webview的缓存机制是什么？","aria-hidden":"true"}},[t._v("#")]),t._v(" Webview的缓存机制是什么？")]),t._v(" "),e("p",[t._v("WebView中存在着两种缓存：网页数据缓存（存储打开过的页面及资源）、H5缓存（cache manifest 文件。这个文件中列出了所有需要在离线状态下使用的资源，浏览器会把这些资源缓存到本地）。")]),t._v(" "),e("h2",{attrs:{id:"有哪些监控网页卡顿的方法"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#有哪些监控网页卡顿的方法","aria-hidden":"true"}},[t._v("#")]),t._v(" 有哪些监控网页卡顿的方法")]),t._v(" "),e("p",[t._v("网页内容在不断变化之中，网页的 FPS 是指浏览器在渲染这些变化时的帧率。"),e("br"),t._v("\n帧率越高，用户感觉网页越流畅，反之则会感觉卡顿。"),e("br"),t._v("\n每秒钟计算一次网页的 FPS 值，获得一列数据，然后分析。"),e("br"),t._v("\n通俗地解释就是，通过 requestAnimationFrame API 来定时执行一些 JS 代码，"),e("br"),t._v("\n如果浏览器卡顿，无法很好地保证渲染的频率，1s 中 frame 无法达到 60 帧，即可间接地反映浏览器的渲染帧率。")]),t._v(" "),e("h2",{attrs:{id:"如果需要手动写动画，你认为最小时间间隔是多久，为什么？"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#如果需要手动写动画，你认为最小时间间隔是多久，为什么？","aria-hidden":"true"}},[t._v("#")]),t._v(" 如果需要手动写动画，你认为最小时间间隔是多久，为什么？")]),t._v(" "),e("p",[t._v("显示器默认频率是60HZ，即1秒刷新60次，故最小时间间隔是 1000/60 = 16.7毫秒")]),t._v(" "),e("h2",{attrs:{id:"什么是cookie-隔离"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#什么是cookie-隔离","aria-hidden":"true"}},[t._v("#")]),t._v(" 什么是Cookie 隔离")]),t._v(" "),e("p",[t._v("若静态文件位于主域名下，请求静态文件时会携带cookie到服务器，浪费流量，故需隔离。"),e("br"),t._v("\n由于cookie有域的限制，不能跨域提交请求，故将静态文件置于非主要域名下，请求静态文件时便不会携带cookie数据。如此可降低请求头大小和请求时间，以便达到降低整体请求耗时的目的。")]),t._v(" "),e("h2",{attrs:{id:"chrome-打开一个页面需要启动多少进程？分别有哪些进程？"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#chrome-打开一个页面需要启动多少进程？分别有哪些进程？","aria-hidden":"true"}},[t._v("#")]),t._v(" Chrome 打开一个页面需要启动多少进程？分别有哪些进程？")]),t._v(" "),e("p",[t._v("打开 1 个页面至少需要 1 个网络进程、1 个浏览器进程、1 个 GPU 进程以及 1 个渲染进程，共 4 个；"),e("br"),t._v("\n最新的 Chrome 浏览器包括：1 个浏览器（Browser）主进程、1 个 GPU 进程、1 个网络（NetWork）进程、多个渲染进程和多个插件进程。")]),t._v(" "),e("p",[t._v("浏览器进程：主要负责界面显示、用户交互、子进程管理，同时提供存储等功能。")]),t._v(" "),e("p",[t._v("渲染进程：核心任务是将 HTML、CSS 和 JavaScript 转换为用户可以与之交互的网页，排版引擎 Blink 和 JavaScript 引擎 V8 都是运行在该进程中，默认情况下，Chrome 会为每个 Tab 标签创建一个渲染进程。出于安全考虑，渲染进程都是运行在沙箱模式下。")]),t._v(" "),e("p",[t._v("GPU 进程：其实，Chrome 刚开始发布的时候是没有 GPU 进程的。而 GPU 的使用初衷是为了实现 3D CSS 的效果，只是随后网页、Chrome 的 UI 界面都选择采用 GPU 来绘制，这使得 GPU 成为浏览器普遍的需求。最后，Chrome 在其多进程架构上也引入了 GPU 进程。")]),t._v(" "),e("p",[t._v("网络进程：主要负责页面的网络资源加载，之前是作为一个模块运行在浏览器进程里面的，直至最近才独立出来，成为一个单独的进程。")]),t._v(" "),e("p",[t._v("插件进程：主要是负责插件的运行，因插件易崩溃，所以需要通过插件进程来隔离，以保证插件进程崩溃不会对浏览器和页面造成影响。")]),t._v(" "),e("h2",{attrs:{id:"promise-和-callback-有什么区别"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#promise-和-callback-有什么区别","aria-hidden":"true"}},[t._v("#")]),t._v(" promise 和 callback 有什么区别")]),t._v(" "),e("p",[t._v("Promise是异步编程的一种解决方案，比传统的解决方案——回调函数和事件更合理")]),t._v(" "),e("p",[t._v("Promise可以用来避免异步操作函数里的嵌套回调问题，因为解决异步最直接的方法是回调嵌套，将后一个的操作放在前一个操作的异步回调里，但如果操作多了，就会有很多层的嵌套。"),e("br"),t._v("\n使用 Promise 对象，可以十分方便的摆脱层层嵌套的异步操作回调函数，而以同步操作的流程书写代码"),e("br"),t._v("\nPromise对象的错误具有“冒泡”性质，会一直向后传递，直到被捕获为止。即错误总会被下一个catch语句捕获")]),t._v(" "),e("h2",{attrs:{id:"介绍暂时性死区"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#介绍暂时性死区","aria-hidden":"true"}},[t._v("#")]),t._v(" 介绍暂时性死区")]),t._v(" "),e("p",[t._v("在代码块内，使用let命令声明变量之前，该变量都是不可用的。"),e("br"),t._v("\n这在语法上，称为“暂时性死区”（temporal dead zone，简称TDZ）。")]),t._v(" "),e("h2",{attrs:{id:"介绍一下pm2"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#介绍一下pm2","aria-hidden":"true"}},[t._v("#")]),t._v(" 介绍一下PM2")]),t._v(" "),e("p",[t._v("pm2 是node进程管理工具"),e("br"),t._v("\n具有： 后台运行，自动重启，停止不稳定的进程，"),e("br"),t._v("\n集群模式下，可以达到重启时不停止服务，"),e("br"),t._v("\n简单日志管理， 自动负载均衡，提供实时接口，返回服务器与进程的信息\nMaster挂了的话Pm2怎么处理？\n立即重启")]),t._v(" "),e("h2",{attrs:{id:"使用过git-merge和git-rebase吗？它们之间有什么区别？"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#使用过git-merge和git-rebase吗？它们之间有什么区别？","aria-hidden":"true"}},[t._v("#")]),t._v(" 使用过git merge和git rebase吗？它们之间有什么区别？")]),t._v(" "),e("p",[t._v("简单的说，git merge和git rebase都是合并分支的命令。")]),t._v(" "),e("p",[t._v("git merge branch会把branch分支的差异内容pull到本地，然后与本地分支的内容一并形成一个committer对象提交到主分支上，合并后的分支与主分支一致；")]),t._v(" "),e("p",[t._v("git rebase branch会把branch分支优先合并到主分支，然后把本地分支的commit放到主分支后面，合并后的分支就好像从合并后主分支又拉了一个分支一样，本地分支本身不会保留提交历史。")]),t._v(" "),e("p",[t._v("修改不够果断，使用合并操作，")]),t._v(" "),e("p",[t._v("您可以充分利用 Rebase ：\n你在本地开发：如果您还没有与其他人合作。此时，你应该更喜欢 rebase 而不是 merge 以保持历史的整洁。\n如果您拥有存储库的个人分支并且未与其他开发人员共享，那么即使您已经推送到分支之后，也可以安全地进行 rebase 。\nRebase 是将更改从一个分支集成到另一个分支的另一种方法。 Rebase 将所有更改压缩为单个“补丁”。然后它将补丁集成到目标分支上。\n与 merge 不同，重定位使历史变得扁平，因为它将完成的工作从一个分支转移到另一个分支。在这个过程中，不需要的历史记录被消除。\nRebases 是更改应从层次结构顶部向下传递的方式，并且 Merge 是它们向上流回的方式")]),t._v(" "),e("h2",{attrs:{id:"告诉我-git-中-head、工作树和索引之间的区别？"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#告诉我-git-中-head、工作树和索引之间的区别？","aria-hidden":"true"}},[t._v("#")]),t._v(" 告诉我 Git 中 HEAD、工作树和索引之间的区别？")]),t._v(" "),e("h2",{attrs:{id:"“git-pull”和“git-fetch”之间有什么区别"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#“git-pull”和“git-fetch”之间有什么区别","aria-hidden":"true"}},[t._v("#")]),t._v(" “git pull”和“git fetch”之间有什么区别")]),t._v(" "),e("p",[t._v("git pull 是 git fetch + git merge")]),t._v(" "),e("h2",{attrs:{id:"说出space-between和space-around的区别"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#说出space-between和space-around的区别","aria-hidden":"true"}},[t._v("#")]),t._v(" 说出space-between和space-around的区别")]),t._v(" "),e("p",[t._v("space-between在左右两侧没有边距，而space-around在左右两侧会留下边距，垂直布局同理")]),t._v(" "),e("h2",{attrs:{id:"你所知道的前端性能优化方案"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#你所知道的前端性能优化方案","aria-hidden":"true"}},[t._v("#")]),t._v(" 你所知道的前端性能优化方案")]),t._v(" "),e("p",[t._v("这个其实方案还是比较多的，可以从DOM层面，CSS样式层面和JS逻辑层面分别入手，大概给出以下几种：\n(1) 减少DOM的访问次数，可以将DOM缓存到变量中；"),e("br"),t._v("\n(2) 减少重绘和回流，任何会导致重绘和回流的操作都应减少执行，可将多次操作合并为一次；"),e("br"),t._v("\n(3) 尽量采用事件委托的方式进行事件绑定，避免大量绑定导致内存占用过多；"),e("br"),t._v("\n(4) css层级尽量扁平化，避免过多的层级嵌套，尽量使用特定的选择器来区分；"),e("br"),t._v("\n(5) 动画尽量使用CSS3动画属性来实现，开启GPU硬件加速；"),e("br"),t._v("\n(6) 图片在加载前提前指定宽高或者脱离文档流，可避免加载后的重新计算导致的页面回流；"),e("br"),t._v("\n(7) css文件在head标签中引入，js文件在body标签中引入，优化关键渲染路径；"),e("br"),t._v("\n(8) 加速或者减少HTTP请求，使用CDN加载静态资源，合理使用浏览器强缓存和协商缓存，小图片可以使用Base64来代替，合理使用浏览器的预取指令prefetch和预加载指令preload；\n(9) 压缩混淆代码，删除无用代码，代码拆分来减少文件体积；\n(10) 小图片使用雪碧图，图片选择合适的质量、尺寸和格式，避免流量浪费。")]),t._v(" "),e("h2",{attrs:{id:"get和post的区别"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#get和post的区别","aria-hidden":"true"}},[t._v("#")]),t._v(" GET和POST的区别")]),t._v(" "),e("p",[t._v("(1) GET请求在浏览器回退和刷新时是无害的，而POST请求会告知用户数据会被重新提交；"),e("br"),t._v("\n(2) GET请求可以收藏为书签，POST请求不可以收藏为书签；"),e("br"),t._v("\n(3) GET请求可以被缓存，POST请求不可以被缓存，除非在响应头中包含合适的Cache-Control/Expires字段，但是不建议缓存POST请求，其不满足幂等性，每次调用都会对服务器资源造成影响；"),e("br"),t._v("\n(4) GET请求一般不具有请求体，因此只能进行url编码，而POST请求支持多种编码方式。"),e("br"),t._v("\n(5) GET请求的参数可以被保留在浏览器的历史中，POST请求不会被保留；"),e("br"),t._v("\n(6) GET请求因为是向URL添加数据，不同的浏览器厂商，代理服务器，web服务器都可能会有自己的长度限制，而POST请求无长度限制；"),e("br"),t._v("\n(7) GET请求只允许ASCII字符，POST请求无限制，支持二进制数据；"),e("br"),t._v("\n(8) GET请求的安全性较差，数据被暴露在浏览器的URL中，所以不能用来传递敏感信息，POST请求的安全性较好，数据不会暴露在URL中；"),e("br"),t._v("\n(9) GET请求具有幂等性(多次请求不会对资源造成影响)，POST请求不幂等；"),e("br"),t._v('\n(10) GET请求一般不具有请求体，请求中一般不包含100-continue 协议，所以只会发一次请求，而POST请求在发送数据到服务端之前允许双方"握手"，客户端先发送Expect:100-continue消息，询问服务端是否愿意接收数据，接收到服务端正确的100-continue应答后才会将请求体发送给服务端，服务端再响应200返回数据。')]),t._v(" "),e("h2",{attrs:{id:"css3中transition和animation的属性分别有哪些"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#css3中transition和animation的属性分别有哪些","aria-hidden":"true"}},[t._v("#")]),t._v(" CSS3中transition和animation的属性分别有哪些")]),t._v(" "),e("p",[t._v("transition 过渡动画："),e("br"),t._v("\n(1) transition-property：属性名称"),e("br"),t._v("\n(2) transition-duration: 间隔时间"),e("br"),t._v("\n(3) transition-timing-function: 动画曲线"),e("br"),t._v("\n(4) transition-delay: 延迟"),e("br"),t._v("\nanimation 关键帧动画：\n(1) animation-name：动画名称\n(2) animation-duration: 间隔时间"),e("br"),t._v("\n(3) animation-timing-function: 动画曲线\n(4) animation-delay: 延迟\n(5) animation-iteration-count：动画次数\n(6) animation-direction: 方向\n(7) animation-fill-mode: 禁止模式")]),t._v(" "),e("h2",{attrs:{id:"选择器优先级"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#选择器优先级","aria-hidden":"true"}},[t._v("#")]),t._v(" 选择器优先级")]),t._v(" "),e("p",[t._v("!important > 行内样式 > id选择器 > class选择器 > 标签选择器 > * > 继承 > 默认")]),t._v(" "),e("h2",{attrs:{id:"跨标签页的通讯方式有哪些"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#跨标签页的通讯方式有哪些","aria-hidden":"true"}},[t._v("#")]),t._v(" 跨标签页的通讯方式有哪些")]),t._v(" "),e("p",[t._v("(1) BroadCastChannel")]),t._v(" "),e("div",{staticClass:"language-js line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-js"}},[e("code",[e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" bc "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("BroadcastChannel")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token string"}},[t._v("'test_channel'")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("  \nbc"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("addEventListener")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"message"')]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("ev")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    wrapper"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("append")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"<p>2接收："')]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v("ev"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("data"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"</p>"')]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nbc"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("postMessage")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("data"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" \nbc"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("close")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" \n")])]),t._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[t._v("1")]),e("br"),e("span",{staticClass:"line-number"},[t._v("2")]),e("br"),e("span",{staticClass:"line-number"},[t._v("3")]),e("br"),e("span",{staticClass:"line-number"},[t._v("4")]),e("br"),e("span",{staticClass:"line-number"},[t._v("5")]),e("br"),e("span",{staticClass:"line-number"},[t._v("6")]),e("br")])]),e("p",[t._v("(2) Service Worker")]),t._v(" "),e("div",{staticClass:"language-js line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-js"}},[e("code",[t._v("navigator"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("serviceWorker"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("register")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token string"}},[t._v("'./sw.js'")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" scope"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v("'./'")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("then")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("reg")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n      "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" messageChannel "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("MessageChannel")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n      messageChannel"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("port1"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),e("span",{pre:!0,attrs:{class:"token function-variable function"}},[t._v("onmessage")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("e")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        console"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("e"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("data"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// this message is from sw.js, to page")]),t._v("\n      "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n      reg"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("active"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("postMessage")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"this message is from page, to sw"')]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("messageChannel"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("por2"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("addEventListener")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token string"}},[t._v("'message'")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("event")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  console"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("event"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("data"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// this message is from page, to sw")]),t._v("\n  event"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("ports"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("postMessage")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token string"}},[t._v("'this message is from sw.js, to page'")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])]),t._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[t._v("1")]),e("br"),e("span",{staticClass:"line-number"},[t._v("2")]),e("br"),e("span",{staticClass:"line-number"},[t._v("3")]),e("br"),e("span",{staticClass:"line-number"},[t._v("4")]),e("br"),e("span",{staticClass:"line-number"},[t._v("5")]),e("br"),e("span",{staticClass:"line-number"},[t._v("6")]),e("br"),e("span",{staticClass:"line-number"},[t._v("7")]),e("br"),e("span",{staticClass:"line-number"},[t._v("8")]),e("br"),e("span",{staticClass:"line-number"},[t._v("9")]),e("br"),e("span",{staticClass:"line-number"},[t._v("10")]),e("br"),e("span",{staticClass:"line-number"},[t._v("11")]),e("br"),e("span",{staticClass:"line-number"},[t._v("12")]),e("br")])]),e("p",[t._v("(3) LocalStorage + window.onstorage监听"),e("br"),t._v("\n(4) Shared Worker + 定时器轮询(setInterval)"),e("br"),t._v("\n(5) IndexedDB + 定时器轮询(setInterval)"),e("br"),t._v("\n(6) cookie + 定时器轮询(setInterval)"),e("br"),t._v("\n(7) window.open + window.postMessage"),e("br"),t._v("\n(8) Websocket")]),t._v(" "),e("h2",{attrs:{id:"介绍下-npm-模块安装机制，为什么输入-npm-install-就可以自动安装对应的模块？"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#介绍下-npm-模块安装机制，为什么输入-npm-install-就可以自动安装对应的模块？","aria-hidden":"true"}},[t._v("#")]),t._v(" 介绍下 npm 模块安装机制，为什么输入 npm install 就可以自动安装对应的模块？")]),t._v(" "),e("ol",[e("li",[e("p",[t._v("npm 模块安装机制：\n发出npm install命令"),e("br"),t._v("\n查询node_modules目录之中是否已经存在指定模块"),e("br"),t._v("\n若存在，不再重新安装"),e("br"),t._v("\n若不存在"),e("br"),t._v("\nnpm 向 registry 查询模块压缩包的网址"),e("br"),t._v("\n下载压缩包，存放在根目录下的.npm目录里"),e("br"),t._v("\n解压压缩包到当前项目的node_modules目录")])]),t._v(" "),e("li",[e("p",[t._v("npm 实现原理")])])]),t._v(" "),e("p",[t._v("输入 npm install 命令并敲下回车后，会经历如下几个阶段（以 npm 5.5.1 为例）：")]),t._v(" "),e("p",[t._v("执行工程自身 preinstall")]),t._v(" "),e("p",[t._v("当前 npm 工程如果定义了 preinstall 钩子此时会被执行。")]),t._v(" "),e("h4",{attrs:{id:"确定首层依赖模块"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#确定首层依赖模块","aria-hidden":"true"}},[t._v("#")]),t._v(" 确定首层依赖模块")]),t._v(" "),e("p",[t._v("首先需要做的是确定工程中的首层依赖，\n也就是 dependencies 和 devDependencies 属性中直接指定的模块（假设此时没有添加 npm install 参数）。")]),t._v(" "),e("p",[t._v("工程本身是整棵依赖树的根节点，\n每个首层依赖模块都是根节点下面的一棵子树，\nnpm 会开启多进程从每个首层依赖模块开始逐步寻找更深层级的节点。")]),t._v(" "),e("h4",{attrs:{id:"获取模块"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#获取模块","aria-hidden":"true"}},[t._v("#")]),t._v(" 获取模块")]),t._v(" "),e("p",[t._v("获取模块是一个递归的过程，分为以下几步：\n获取模块信息。在下载一个模块之前，首先要确定其版本，这是因为 package.json 中往往是 semantic version（semver，语义化版本）。此时如果版本描述文件（npm-shrinkwrap.json 或 package-lock.json）中有该模块信息直接拿即可，如果没有则从仓库获取。如 packaeg.json 中某个包的版本是 ^1.1.0，npm 就会去仓库中获取符合 1.x.x 形式的最新版本。\n获取模块实体。上一步会获取到模块的压缩包地址（resolved 字段），npm 会用此地址检查本地缓存，缓存中有就直接拿，如果没有则从仓库下载。\n查找该模块依赖，如果有依赖则回到第1步，如果没有则停止。")]),t._v(" "),e("h2",{attrs:{id:"v-if、v-show、v-html-的原理是什么，它是如何封装的？"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#v-if、v-show、v-html-的原理是什么，它是如何封装的？","aria-hidden":"true"}},[t._v("#")]),t._v(" v-if、v-show、v-html 的原理是什么，它是如何封装的？")]),t._v(" "),e("h2",{attrs:{id:"为什么建立连接要三次握手，为什么不是2次，4次"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#为什么建立连接要三次握手，为什么不是2次，4次","aria-hidden":"true"}},[t._v("#")]),t._v(" 为什么建立连接要三次握手，为什么不是2次，4次")]),t._v(" "),e("p",[t._v("三次是最小的安全次数，可以保证通信的双方都具有发送消息和接收响应的能力，发送方和接收方始终同步序号，可以实现可靠传输。")]),t._v(" "),e("h2",{attrs:{id:"说说事件循环机制"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#说说事件循环机制","aria-hidden":"true"}},[t._v("#")]),t._v(" 说说事件循环机制")]),t._v(" "),e("p",[t._v("JavaScript代码的执行过程中，除了依靠函数调用栈来搞定函数的执行顺序外，还依靠任务队列(task queue)来搞定另外一些代码的执行。整个执行过程，我们称为事件循环过程。一个线程中，事件循环是唯一的，但是任务队列可以拥有多个。任务队列又分为macro-task（宏任务）与micro-task（微任务），在最新标准中，它们被分别称为task与jobs。\nmacro-task大概包括：\nscript(整体代码)\nsetTimeout\nsetInterval\nsetImmediate\nI/O\nUI render\nmicro-task大概包括:\nprocess.nextTick\nPromise\nAsync/Await(实际就是promise)\nMutationObserver(html5新特性)")]),t._v(" "),e("h2",{attrs:{id:"如何监控网页崩溃"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#如何监控网页崩溃","aria-hidden":"true"}},[t._v("#")]),t._v(" 如何监控网页崩溃?")]),t._v(" "),e("ol",[e("li",[t._v("利用页面崩溃无法触发 beforeunload 事件来实现")]),t._v(" "),e("li",[t._v("基于 Service Worker 实现一种基于心跳检测的监控方案")])]),t._v(" "),e("h2",{attrs:{id:"长按闪退的问题"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#长按闪退的问题","aria-hidden":"true"}},[t._v("#")]),t._v(" 长按闪退的问题")]),t._v(" "),e("p",[t._v("长按列表页的列表项时(触摸到文字)，在低版本手机中会出现闪退的情况"),e("br"),t._v("\njs部分：在事件触发时添加e.preventDefault();，用于阻止默认行为"),e("br"),t._v("\ncss部分：添加禁止文本文本复制的代码")]),t._v(" "),e("h2",{attrs:{id:"正向代理与反向代理的理解以及区别"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#正向代理与反向代理的理解以及区别","aria-hidden":"true"}},[t._v("#")]),t._v(" 正向代理与反向代理的理解以及区别")]),t._v(" "),e("p",[t._v("正向代理："),e("br"),t._v("\n1、用户发送请求到自己的代理服务器"),e("br"),t._v("\n2、自己的代理服务器发送请求到服务器"),e("br"),t._v("\n3、服务器将数据返回到自己的代理服务器"),e("br"),t._v("\n4、自己的代理服务器再将数据返回给用户"),e("br"),t._v("\n反向代理\n1、用户发送请求到服务器（访问的其实是反向代理服务器，但用户不知道）"),e("br"),t._v("\n2、反向代理服务器发送请求到真正的服务器"),e("br"),t._v("\n3、真正的服务器将数据返回给反向代理服务器"),e("br"),t._v("\n4、反向代理服务器再将数据返回给用户"),e("br"),t._v("\n正向代理隐藏的是用户，反向代理隐藏的是服务器")]),t._v(" "),e("h2",{attrs:{id:"cdn有哪些优化静态资源加载速度的方法？"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#cdn有哪些优化静态资源加载速度的方法？","aria-hidden":"true"}},[t._v("#")]),t._v(" CDN有哪些优化静态资源加载速度的方法？")]),t._v(" "),e("p",[t._v("资源调度：CDN会根据用户接入网络的ip寻找距离用户最优路径的服务器。调度的方式主要有DNS调度、http 302调度、使用 HTTP 进行的 DNS 调度（多用于移动端）；\n缓存策略和数据检索：CDN服务器使用高效的算法和数据结构，快速的检索资源和更新读取缓存；\n网络优化：从OSI七层模型进行优化，达到网络优化的目的。\nL1物理层：硬件设备升级提高速度\nL2数据链路层：寻找更快的网络节点、确保 Lastmile 尽量短\nL3路由层：路径优化，寻找两点间最优路径\nL4传输层：协议TCP优化，保持长连接、TCP快速打开\nL7应用层：静态资源压缩、请求合并")]),t._v(" "),e("h2",{attrs:{id:"消除transition闪屏"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#消除transition闪屏","aria-hidden":"true"}},[t._v("#")]),t._v(" 消除transition闪屏")]),t._v(" "),e("pre",[e("code",[t._v("-webkit-transform-style: preserve-3d;\n-webkit-backface-visibility: hidden; 属性定义当元素不面向屏幕时是否可见。\n")])]),t._v(" "),e("p",[t._v("如果在旋转元素不希望看到其背面时，该属性很有用。\n-webkit-perspective: 1000;")]),t._v(" "),e("h2",{attrs:{id:"gpu-加速原理"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#gpu-加速原理","aria-hidden":"true"}},[t._v("#")]),t._v(" GPU 加速原理")]),t._v(" "),e("p",[t._v("GPU加速实际上是大幅减少了合成/绘制时间，从而大大地提高了页面速度，但GPU加速有自己的缺点：\n过多的GPU层会带来性能开销，主要原因是使用GPU加速其实是利用了GPU层的缓存，让渲染资源可以重复使用，所以一旦层多了，\n缓存增大，就会引起别的性能问题")]),t._v(" "),e("h2",{attrs:{id:"fetch-和-ajax-的区别"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#fetch-和-ajax-的区别","aria-hidden":"true"}},[t._v("#")]),t._v(" fetch 和 ajax 的区别")]),t._v(" "),e("ol",[e("li",[t._v("fetch\nwindow 的一个方法，它的主要特点有：\n1、第一个参数是URL:\n2、第二个是可选参数，可以控制不同配置的 init 对象\n3、使用了 JavaScript Promises 来处理结果/回调:")]),t._v(" "),e("li",[t._v("ajax\n是使用XMLHttpRequest对象来请求数据")])]),t._v(" "),e("h2",{attrs:{id:"渲染引擎"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#渲染引擎","aria-hidden":"true"}},[t._v("#")]),t._v(" 渲染引擎")]),t._v(" "),e("p",[t._v("一个渲染引擎主要包括 HTML 解释器、CSS 解释器、布局和 JavaScript 引擎等，\nJavaScript 引擎现在都已经独立出来。 下面是所依赖的模块，包括网络，存储，2D/3D 图形，音频和视频，图片解码器等等…,\n再下面就是操作系统相关的支持。")]),t._v(" "),e("h2",{attrs:{id:"常见的浏览器内核有哪些，介绍一下你对浏览器内核的理解"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#常见的浏览器内核有哪些，介绍一下你对浏览器内核的理解","aria-hidden":"true"}},[t._v("#")]),t._v(" 常见的浏览器内核有哪些，介绍一下你对浏览器内核的理解")]),t._v(" "),e("p",[t._v("Trident内核：IE\nGecko内核：火狐\nBlink内核：Opera7及以上。\nWebkit内核：Safari，Chrome等。[Chrome的：Blink（WebKit的分支）]")]),t._v(" "),e("p",[t._v("浏览器内核又可以分成两部分：渲染引擎和JS引擎。"),e("br"),t._v("\n渲染引擎主要负责取得网页的内容、整理讯息、计算网页的显示方式等，"),e("br"),t._v("\nJS引擎则是解析Javascript语言，执行javascript语言来实现网页的动态效果。")]),t._v(" "),e("h2",{attrs:{id:"什么是文档流"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#什么是文档流","aria-hidden":"true"}},[t._v("#")]),t._v(" 什么是文档流")]),t._v(" "),e("p",[t._v("将窗体自上而下分成若干行,并在每行中按从左至右的依次排放元素,即为文档流")]),t._v(" "),e("h2",{attrs:{id:"display-none与visibility：hidden的区别"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#display-none与visibility：hidden的区别","aria-hidden":"true"}},[t._v("#")]),t._v(" display:none与visibility：hidden的区别")]),t._v(" "),e("p",[t._v("区别|\tdisplay:none|\tvisibility：hidden的\n是否占据空间|\t不占据任何空间，在文档渲染时，该元素如同不存在（但依然存在文档对象模型树中）|\t该元素空间依旧存在\n是否渲染|\t会触发reflow（回流），进行渲染|\t只会触发repaint（重绘），因为没有发现位置变化，不进行渲染\n是否是继承属性|\t不是继承属性，元素及其子元素都会消失|\t是继承属性，若子元素使用了visibility:visible，则不继承，这个子孙元素又会显现出")]),t._v(" "),e("h2",{attrs:{id:"css中link-和-import的区别"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#css中link-和-import的区别","aria-hidden":"true"}},[t._v("#")]),t._v(" CSS中link 和@import的区别")]),t._v(" "),e("p",[t._v("link属于XHTML标签，@import完全是CSS提供的一种方式,只能加载CSS\n加载顺序的差别，当一个页面被加载的时候，link引用的CSS会同时被加载，\n而@import引用的CSS 会等到页面全部被下载完再被加载\n兼容性的差别。由于@import是CSS2.1提出的所以老的浏览器不支持，而link标签无此问题\n当使用javascript控制dom去改变样式的时候，只能使用link标签，因为@import不是dom可以控制的")]),t._v(" "),e("h2",{attrs:{id:"before-和-after中双冒号和单冒号有什么区别？解释一下这2个伪元素的作用"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#before-和-after中双冒号和单冒号有什么区别？解释一下这2个伪元素的作用","aria-hidden":"true"}},[t._v("#")]),t._v(" ::before 和 :after中双冒号和单冒号有什么区别？解释一下这2个伪元素的作用")]),t._v(" "),e("p",[t._v("单冒号(:)用于CSS3伪类，双冒号(::)用于CSS3伪元素。（伪元素由双冒号和伪元素名称组成）"),e("br"),t._v("\n,双冒号是在当前规范中引入的，用于区分伪类和伪元素")]),t._v(" "),e("h2",{attrs:{id:"二进制转-base64"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#二进制转-base64","aria-hidden":"true"}},[t._v("#")]),t._v(" 二进制转 Base64")]),t._v(" "),e("p",[t._v("字符串转二进制 a.charCodeAt().toString(2)"),e("br"),t._v("\nString.fromCharCode")]),t._v(" "),e("div",{staticClass:"language-js line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-js"}},[e("code",[e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" encodedData "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" window"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("btoa")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Hello, world"')]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 编码")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" decodedData "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" window"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("atob")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("encodedData"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("    "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 解码")]),t._v("\n")])]),t._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[t._v("1")]),e("br"),e("span",{staticClass:"line-number"},[t._v("2")]),e("br")])]),e("h2",{attrs:{id:"dom事件中target和currenttarget的区别"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#dom事件中target和currenttarget的区别","aria-hidden":"true"}},[t._v("#")]),t._v(" DOM事件中target和currentTarget的区别")]),t._v(" "),e("p",[t._v("event.target 返回触发事件的元素"),e("br"),t._v("\nevent.currentTarget 返回绑定事件的元素")]),t._v(" "),e("h2",{attrs:{id:"移动端300ms延迟由来及解决方案"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#移动端300ms延迟由来及解决方案","aria-hidden":"true"}},[t._v("#")]),t._v(" 移动端300ms延迟由来及解决方案")]),t._v(" "),e("ol",[e("li",[t._v("300ms延迟由来\n300 毫秒延迟的主要原因是解决双击缩放(double tap to zoom)。双击缩放，顾名思义，\n即用手指在屏幕上快速点击两次，iOS 自带的 Safari 浏览器会将网页缩放至原始比例。\n那么这和 300 毫秒延迟有什么联系呢？ 假定这么一个场景。\n用户在 iOS Safari 里边点击了一个链接。由于用户可以进行双击缩放或者双击滚动的操作，\n当用户一次点击屏幕之后，浏览器并不能立刻判断用户是确实要打开这个链接，还是想要进行双击操作。\n因此，iOS Safari 就等待 300 毫秒，以判断用户是否再次点击了屏幕。 鉴于iPhone的成功，其他移动浏览器都复制了 iPhone Safari 浏览器的多数约定，包括双击缩放，几乎现在所有的移动端浏览器都有这个功能。")]),t._v(" "),e("li",[t._v("解决方案")])]),t._v(" "),e("div",{staticClass:"language-js line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-js"}},[e("code",[e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("meta name"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"viewport"')]),t._v(" content"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"width=device-width,initial-scale=1,minimum-scale=1,maximum-scale=1,user-scalable=no"')]),t._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v("\n")])]),t._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[t._v("1")]),e("br")])]),e("p",[t._v("移动端事件触发顺序：在移动端，手指点击一个元素，会经过：touchstart --\x3e touchmove -> touchend --\x3eclick。\nfastclick.js的原理是：FastClick的实现原理是在检测到touchend事件的时候，\n会通过DOM自定义事件立即出发模拟一个click事件，并把浏览器在300ms之后真正的click事件阻止掉。")]),t._v(" "),e("h2",{attrs:{id:"前后端分离的项目如何seo"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#前后端分离的项目如何seo","aria-hidden":"true"}},[t._v("#")]),t._v(" 前后端分离的项目如何seo")]),t._v(" "),e("p",[t._v("使用prerender。但是回答prerender，面试官肯定会问你，如果不用prerender，让你直接去实现，好的，请看下面的第二个答案。\n先去 www.baidu.com/robots.txt 找出常见的爬虫，然后在nginx上判断来访问页面用户的User-Agent是否是爬虫，如果是爬虫，就用nginx方向代理到我们自己用nodejs + puppeteer实现的爬虫服务器上，然后用你的爬虫服务器爬自己的前后端分离的前端项目页面，增加扒页面的接收延时，保证异步渲染的接口数据返回，最后得到了页面的数据，返还给来访问的爬虫即可。")]),t._v(" "),e("h2",{attrs:{id:"一次性插入1000个div，如何优化插入的性能"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#一次性插入1000个div，如何优化插入的性能","aria-hidden":"true"}},[t._v("#")]),t._v(" 一次性插入1000个div，如何优化插入的性能")]),t._v(" "),e("p",[t._v("使用Fragment\nvar fragment = document.createDocumentFragment();\nfragment.appendChild(elem);\nDocumentFragments 是DOM节点。\n它们不是主DOM树的一部分。通常的用例是创建文档片段，\n将元素附加到文档片段，然后将文档片段附加到DOM树。在DOM树中，文档片段被其所有的子元素所代替。"),e("br"),t._v("\n因为文档片段存在于内存中，并不在DOM树中，所以将子元素插入到文档片段时不会引起页面回流（对元素位置和几何上的计算）。因此，使用文档片段通常会带来更好的性能。")]),t._v(" "),e("p",[t._v("复制代码\n向1000个并排的div元素中，插入一个平级的div元素，如何优化插入的性能"),e("br"),t._v("\n先display:none 然后插入 再display:block"),e("br"),t._v("\n赋予key，然后使用virtual-dom，先render，然后diff，最后patch"),e("br"),t._v("\n脱离文档流，用GPU去渲染，开启硬件加速")]),t._v(" "),e("h2",{attrs:{id:"a-b-c-d和a-b-c-d-，哪个性能更高"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#a-b-c-d和a-b-c-d-，哪个性能更高","aria-hidden":"true"}},[t._v("#")]),t._v(" a.b.c.d和a['b']['c']['d']，哪个性能更高")]),t._v(" "),e("p",[t._v("a['b']['c']和a.b.c，转换成AST前者的的树是含计算的，后者只是string literal，天然前者会消耗更多的计算成本，时间也更长")]),t._v(" "),e("h2",{attrs:{id:"伪类和伪元素的区别"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#伪类和伪元素的区别","aria-hidden":"true"}},[t._v("#")]),t._v(" 伪类和伪元素的区别")]),t._v(" "),e("ol",[e("li",[t._v("伪元素: 改变dom结构，创建虚拟dom")]),t._v(" "),e("li",[t._v("伪类: 不修改dom内容，通过一些特定的选择器根据特定的状态，特定条件来修改元素的样式")])]),t._v(" "),e("h2",{attrs:{id:"讲讲mvvm，说说与mvc有什么区别"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#讲讲mvvm，说说与mvc有什么区别","aria-hidden":"true"}},[t._v("#")]),t._v(" 讲讲MVVM，说说与MVC有什么区别")]),t._v(" "),e("p",[t._v("MVVM是Model-View-ViewModel的简写。它本质上就是MVC 的改进版。\nMVVM 就是将其中的View 的状态和行为抽象化，让我们将视图 UI 和业务逻辑分开。\n当然这些事 ViewModel 已经帮我们做了，它可以取出 Model 的数据同时帮忙处理 View 中由于需要展示内容而涉及的业务逻辑。")]),t._v(" "),e("p",[t._v("MVC 业务逻辑、数据、界面显示分离的方法组织代码")]),t._v(" "),e("h2",{attrs:{id:"说说z-index有什么需要注意的地方"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#说说z-index有什么需要注意的地方","aria-hidden":"true"}},[t._v("#")]),t._v(" 说说z-index有什么需要注意的地方")]),t._v(" "),e("p",[t._v("background/border < -z-index< block < float <\ninline < z-index:auto < z-index")]),t._v(" "),e("h2",{attrs:{id:"说说dom事件流"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#说说dom事件流","aria-hidden":"true"}},[t._v("#")]),t._v(" 说说DOM事件流")]),t._v(" "),e("p",[t._v("DOM事件流包括三个阶段。\n事件捕获阶段，处于目标阶段，事件冒泡阶段。"),e("br"),t._v("\nevent.target返回触发事件的元素\nevent.currentTarget返回绑定事件的元素\nrelatedTarget 事件属性返回与事件的目标节点相关的节点。\n对于 mouseover 事件来说，该属性是鼠标指针移到目标节点上时所离开的那个节点。\n对于 mouseout 事件来说，该属性是离开目标时，鼠标指针进入的节点。\n对于其他类型的事件来说，这个属性没有用。")]),t._v(" "),e("h2",{attrs:{id:"http状态码206是干什么的"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#http状态码206是干什么的","aria-hidden":"true"}},[t._v("#")]),t._v(" HTTP状态码206是干什么的")]),t._v(" "),e("p",[t._v("206 部分请求成功，断点续传")]),t._v(" "),e("h2",{attrs:{id:"vue的数据为什么频繁变化但只会更新一次"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#vue的数据为什么频繁变化但只会更新一次","aria-hidden":"true"}},[t._v("#")]),t._v(" Vue的数据为什么频繁变化但只会更新一次")]),t._v(" "),e("p",[t._v("Vue是异步更新Dom的，Dom的更新放在下一个宏任务或者当前宏任务的末尾（微任务）中进行执行\n由于VUE的数据驱动视图更新是异步的，即修改数据的当下，视图不会立刻更新，\n而是等同一事件循环中的所有数据变化完成之后，再统一进行视图更新。")]),t._v(" "),e("h2",{attrs:{id:"判断两个变量是否一样"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#判断两个变量是否一样","aria-hidden":"true"}},[t._v("#")]),t._v(" 判断两个变量是否一样")]),t._v(" "),e("p",[t._v("Object.is")]),t._v(" "),e("p",[t._v("if (!Object.is) {\nObject.is = function(x, y) {\n// SameValue algorithm\nif (x === y) { // Steps 1-5, 7-10\n// Steps 6.b-6.e: +0 != -0\nreturn x !== 0 || 1 / x === 1 / y;\n} else {\n// Step 6.a: NaN == NaN\nreturn x !== x && y !== y;\n}\n};\n}")]),t._v(" "),e("h2",{attrs:{id:"vue模板编译的过程"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#vue模板编译的过程","aria-hidden":"true"}},[t._v("#")]),t._v(" Vue模板编译的过程")]),t._v(" "),e("p",[t._v("DocumentFragments：\n解析指令（属性节点）与插值表达式（文本节点），并替换模板数据，初始化视图；\n将每个指令对应的节点绑定更新函数，添加监听数据的订阅者，一旦数据有变动，收到通知，更新视图；")]),t._v(" "),e("h2",{attrs:{id:"居中为什么要使用transform（为什么不使用marginleft-top）"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#居中为什么要使用transform（为什么不使用marginleft-top）","aria-hidden":"true"}},[t._v("#")]),t._v(" 居中为什么要使用transform（为什么不使用marginLeft/Top）")]),t._v(" "),e("p",[t._v("transform 属于合成属性（composite property），对合成属性进行 transition/animation 动画将会创建一个合成层（composite layer），这使得被动画元素在一个独立的层中进行动画。通常情况下，浏览器会将一个层的内容先绘制进一个位图中，然后再作为纹理（texture）上传到 GPU，只要该层的内容不发生改变，就没必要进行重绘（repaint），浏览器会通过重新复合（recomposite）来形成一个新的帧。"),e("br"),t._v("\ntop/left属于布局属性，该属性的变化会导致重排（reflow/relayout），所谓重排即指对这些节点以及受这些节点影响的其它节点，进行CSS计算->布局->重绘过程，浏览器需要为整个层进行重绘并重新上传到 GPU，造成了极大的性能开销。")]),t._v(" "),e("h2",{attrs:{id:"src和-href-的区别"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#src和-href-的区别","aria-hidden":"true"}},[t._v("#")]),t._v(" src和 href 的区别")]),t._v(" "),e("p",[t._v("href标识超文本引用，用在link和a等元素上，href是引用和页面关联，是在当前元素和引用资源之间建立联系。"),e("br"),t._v("\nsrc表示引用资源，表示替换当前元素，用在img，script，iframe上，src是页面内容不可缺少的一部分。"),e("br"),t._v("\nsrc是source的缩写，是指向外部资源的位置，指向的内部会迁入到文档中当前标签所在的位置；在请求src资源时会将其指向的资源下载并应用到当前文档中，例如js脚本，img图片和frame等元素。")]),t._v(" "),e("h2",{attrs:{id:"介绍ssl和tls"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#介绍ssl和tls","aria-hidden":"true"}},[t._v("#")]),t._v(" 介绍SSL和TLS")]),t._v(" "),e("p",[t._v("SSL：（Secure Socket Layer，安全套接字层），位于可靠的面向连接的网络层协议和应用层协议之间的一种协议层。SSL通过互相认证、使用数字签名确保完整性、使用加密确保私密性，以实现客户端和服务器之间的安全通讯。该协议由两层组成：SSL记录协议和SSL握手协议。"),e("br"),t._v("\nTLS：（Transport Layer Security，传输层安全协议），用于两个应用程序之间提供保密性和数据完整性。该协议由两层组成：TLS记录协议和TLS握手协议。")]),t._v(" "),e("h2",{attrs:{id:"http-301和302"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#http-301和302","aria-hidden":"true"}},[t._v("#")]),t._v(" http 301和302")]),t._v(" "),e("p",[t._v("301 redirect: 301 代表永久性转移(Permanently Moved)"),e("br"),t._v("\n302 redirect: 302 代表暂时性转移(Temporarily Moved )")]),t._v(" "),e("h2",{attrs:{id:"delete-数组的-item，数组的-length-是否会-1"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#delete-数组的-item，数组的-length-是否会-1","aria-hidden":"true"}},[t._v("#")]),t._v(" delete 数组的 item，数组的 length 是否会 -1")]),t._v(" "),e("p",[t._v("不会，数组长度不变，数组变成[empty,empty...]")]),t._v(" "),e("h2",{attrs:{id:"给出-1-3-10-map-parseint-执行结果"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#给出-1-3-10-map-parseint-执行结果","aria-hidden":"true"}},[t._v("#")]),t._v(" 给出 ['1', '3', '10'].map(parseInt) 执行结果")]),t._v(" "),e("p",[t._v("['1', '3', '10'].map((it,index)=>parseInt(it,index))\nindex:0,1,2\n[1, NaN, 2]")]),t._v(" "),e("h2",{attrs:{id:"http劫持、dns劫持与xss"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#http劫持、dns劫持与xss","aria-hidden":"true"}},[t._v("#")]),t._v(" HTTP劫持、DNS劫持与XSS")]),t._v(" "),e("p",[t._v("HTTP劫持\n什么是HTTP劫持呢，大多数情况是运营商HTTP劫持，当我们使用HTTP请求请求一个网站页面的时候，网络运营商会在正常的数据流中插入精心设计的网络数据报文，让客户端（通常是浏览器）展示“错误”的数据，通常是一些弹窗，宣传性广告或者直接显示某网站的内容，大家应该都有遇到过。")]),t._v(" "),e("p",[t._v("DNS劫持\nDNS 劫持就是通过劫持了 DNS 服务器，通过某些手段取得某域名的解析记录控制权，进而修改此域名的解析结果，导致对该域名的访问由原IP地址转入到修改后的指定IP，其结果就是对特定的网址不能访问或访问的是假网址，从而实现窃取资料或者破坏原有正常服务的目的。")]),t._v(" "),e("p",[t._v("DNS 劫持比之 HTTP 劫持 更加过分，简单说就是我们请求的是 http://www.a.com/index.html ，直接被重定向了 http://www.b.com/index.html ，本文不会过多讨论这种情况。")]),t._v(" "),e("p",[t._v("XSS跨站脚本\nXSS指的是攻击者利用漏洞，向 Web 页面中注入恶意代码，当用户浏览该页之时，注入的代码会被执行，从而达到攻击的特殊目的。")]),t._v(" "),e("p",[t._v("关于这些攻击如何生成，攻击者如何注入恶意代码到页面中本文不做讨论，只要知道如 HTTP 劫持 和 XSS 最终都是恶意代码在客户端，通常也就是用户浏览器端执行，本文将讨论的就是假设注入已经存在，如何利用 Javascript 进行行之有效的前端防护。")]),t._v(" "),e("h2",{attrs:{id:"虚拟dom的优劣如何"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#虚拟dom的优劣如何","aria-hidden":"true"}},[t._v("#")]),t._v(" 虚拟DOM的优劣如何?")]),t._v(" "),e("p",[t._v("优点:")]),t._v(" "),e("p",[t._v("保证性能下限: 虚拟DOM可以经过diff找出最小差异,然后批量进行patch,这种操作虽然比不上手动优化,但是比起粗暴的DOM操作性能要好很多,因此虚拟DOM可以保证性能下限\n无需手动操作DOM: 虚拟DOM的diff和patch都是在一次更新中自动进行的,我们无需手动操作DOM,极大提高开发效率\n跨平台: 虚拟DOM本质上是JavaScript对象,而DOM与平台强相关,相比之下虚拟DOM可以进行更方便地跨平台操作,例如服务器渲染、移动端开发等等")]),t._v(" "),e("p",[t._v("缺点:")]),t._v(" "),e("p",[t._v("无法进行极致优化: 在一些性能要求极高的应用中虚拟DOM无法进行针对性的极致优化,\n比如VScode采用直接手动操作DOM的方式进行极端的性能优化")]),t._v(" "),e("h2",{attrs:{id:"介绍下-bfc、ifc、gfc-和-ffc"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#介绍下-bfc、ifc、gfc-和-ffc","aria-hidden":"true"}},[t._v("#")]),t._v(" 介绍下 BFC、IFC、GFC 和 FFC")]),t._v(" "),e("p",[t._v("BFC（Block formatting contexts）：块级格式上下文\n页面上的一个隔离的渲染区域，那么他是如何产生的呢？可以触发BFC的元素有float、position、overflow、display：table-cell/ inline-block/table-caption ；")]),t._v(" "),e("p",[t._v("IFC（Inline formatting contexts）：内联格式上下文\nIFC的line box（线框）高度由其包含行内元素中最高的实际高度计算而来（不受到竖直方向的padding/margin影响)IFC中的line box一般左右都贴紧整个IFC，但是会因为float元素而扰乱。float元素会位于IFC与与line box之间，使得line box宽度缩短。 同个ifc下的多个line box高度会不同\nIFC中时不可能有块级元素的，当插入块级元素时（如p中插入div）会产生两个匿名块与div分隔开，即产生两个IFC，每个IFC对外表现为块级元素，与div垂直排列。\n那么IFC一般有什么用呢？\n水平居中：当一个块要在环境中水平居中时，设置其为inline-block则会在外层产生IFC，通过text-align则可以使其水平居中。\n垂直居中：创建一个IFC，用其中一个元素撑开父元素的高度，然后设置其vertical-align:middle，其他行内元素则可以在此父元素下垂直居中。")]),t._v(" "),e("p",[t._v("GFC（GrideLayout formatting contexts）：网格布局格式化上下文\n当为一个元素设置display值为grid的时候，此元素将会获得一个独立的渲染区域，我们可以通过在网格容器（grid container）上定义网格定义行（grid definition rows）和网格定义列（grid definition columns）属性各在网格项目（grid item）上定义网格行（grid row）和网格列（grid columns）为每一个网格项目（grid item）定义位置和空间。那么GFC有什么用呢，和table又有什么区别呢？首先同样是一个二维的表格，但GridLayout会有更加丰富的属性来控制行列，控制对齐以及更为精细的渲染语义和控制。")]),t._v(" "),e("p",[t._v("FFC（Flex formatting contexts）:自适应格式上下文\ndisplay值为flex或者inline-flex的元素将会生成自适应容器（flex container），可惜这个牛逼的属性只有谷歌和火狐支持，不过在移动端也足够了，至少safari和chrome还是OK的，毕竟这俩在移动端才是王道。Flex Box 由伸缩容器和伸缩项目组成。通过设置元素的 display 属性为 flex 或 inline-flex 可以得到一个伸缩容器。设置为 flex 的容器被渲染为一个块级元素，而设置为 inline-flex 的容器则渲染为一个行内元素。伸缩容器中的每一个子元素都是一个伸缩项目。伸缩项目可以是任意数量的。伸缩容器外和伸缩项目内的一切元素都不受影响。简单地说，Flexbox 定义了伸缩容器内伸缩项目该如何布局。")]),t._v(" "),e("h2",{attrs:{id:"vue-的父组件和子组件生命周期钩子执行顺序是什么"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#vue-的父组件和子组件生命周期钩子执行顺序是什么","aria-hidden":"true"}},[t._v("#")]),t._v(" Vue 的父组件和子组件生命周期钩子执行顺序是什么")]),t._v(" "),e("p",[t._v("父组建： beforeCreate -> created -> beforeMount\n子组件： -> beforeCreate -> created -> beforeMount -> mounted\n父组件： -> mounted\n总结：从外到内，再从内到外")]),t._v(" "),e("h2",{attrs:{id:"http-缓存的优先级"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#http-缓存的优先级","aria-hidden":"true"}},[t._v("#")]),t._v(" http 缓存的优先级")]),t._v(" "),e("p",[t._v("强缓存>协商缓存\n1、Expires\nExpires是一个Http1.0提出的概念，它描述的是一个绝对时间，由服务端返回\nExpires: Wed, 11 May 2018 07:20:00 GMT\n这种方式的弊端在于如果我们修改了客户端的时间可能会意外导致缓存失效。\n2、Cache-Control\ncatche-control是http1.1提出的概念，优先级高于expires，描述的是一个相对时间")]),t._v(" "),e("h2",{attrs:{id:"node-面试题"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#node-面试题","aria-hidden":"true"}},[t._v("#")]),t._v(" Node 面试题")]),t._v(" "),e("h2",{attrs:{id:"node-js的加载机制require-和-module-exportsnodejs认为一个js文件就是一个模块，每个模块都有一个全局对象module，同时module对象中有一个对象exports。exports是module-exports对象的别名，提供便捷的属性和方法设置这个对象被加载一次之后会别缓存，里面提供了模块的父子模块关联信息，即父模块被那些模块引用，子模块引用了那些模块。require可以加载文件模块（-js、-code、-json）和nodejs核心模块，最终获取到的是module-exports对象。第一次加载的时候执行代码，第二次从缓存中获取module-exports对象，如果没有发现指定模块就报错not-find-module。"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#node-js的加载机制require-和-module-exportsnodejs认为一个js文件就是一个模块，每个模块都有一个全局对象module，同时module对象中有一个对象exports。exports是module-exports对象的别名，提供便捷的属性和方法设置这个对象被加载一次之后会别缓存，里面提供了模块的父子模块关联信息，即父模块被那些模块引用，子模块引用了那些模块。require可以加载文件模块（-js、-code、-json）和nodejs核心模块，最终获取到的是module-exports对象。第一次加载的时候执行代码，第二次从缓存中获取module-exports对象，如果没有发现指定模块就报错not-find-module。","aria-hidden":"true"}},[t._v("#")]),t._v(" Node.js的加载机制"),e("br"),t._v("\nrequire 和 module.exports\nnodejs认为一个js文件就是一个模块，每个模块都有一个全局对象module，同时module对象中有一个对象exports。"),e("br"),t._v("\nexports是module.exports对象的别名，提供便捷的属性和方法设置"),e("br"),t._v("\n这个对象被加载一次之后会别缓存，里面提供了模块的父子模块关联信息，即父模块被那些模块引用，子模块引用了那些模块。\nrequire可以加载文件模块（.js、.code、.json）和nodejs核心模块，最终获取到的是module.exports对象。第一次加载的时候执行代码，第二次从缓存中获取module.exports对象，如果没有发现指定模块就报错not find module。")]),t._v(" "),e("h2",{attrs:{id:"严格路由和不严格路由有什么区别strict-严格路由，例如-foo-和-foo-，默认false关闭。"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#严格路由和不严格路由有什么区别strict-严格路由，例如-foo-和-foo-，默认false关闭。","aria-hidden":"true"}},[t._v("#")]),t._v(" 严格路由和不严格路由有什么区别"),e("br"),t._v("\nstrict 严格路由，例如 /foo 和 /foo/ ，默认false关闭。")]),t._v(" "),e("h2",{attrs:{id:"如何设置路由不敏感或严格路由casesensitive-truestrict-true"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#如何设置路由不敏感或严格路由casesensitive-truestrict-true","aria-hidden":"true"}},[t._v("#")]),t._v(" 如何设置路由不敏感或严格路由"),e("br"),t._v("\ncaseSensitive:true\nstrict:true")]),t._v(" "),e("h2",{attrs:{id:"什么是lazy-router以及为什么要lazy-router生成默认路由对象。无法在默认配置中添加基本路由器，因为可能在运行之后设置的应用程序设置。"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#什么是lazy-router以及为什么要lazy-router生成默认路由对象。无法在默认配置中添加基本路由器，因为可能在运行之后设置的应用程序设置。","aria-hidden":"true"}},[t._v("#")]),t._v(" 什么是lazy router以及为什么要lazy router"),e("br"),t._v("\n生成默认路由对象。\n无法在默认配置中添加基本路由器，因为可能在运行之后设置的应用程序设置。")]),t._v(" "),e("h2",{attrs:{id:"trust-proxy什么用req-ip获取到的ip将是实际客户端的ip否则，获取到的是代理服务器的ip"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#trust-proxy什么用req-ip获取到的ip将是实际客户端的ip否则，获取到的是代理服务器的ip","aria-hidden":"true"}},[t._v("#")]),t._v(" trust proxy什么用\nreq.ip获取到的ip将是实际客户端的ip\n否则，获取到的是代理服务器的ip.")]),t._v(" "),e("h2",{attrs:{id:"etag-weak-和strong有什么区别strong-要完完全全一样weak-页面内容一样，只是时间戳不一样可以回一个一样的etag。"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#etag-weak-和strong有什么区别strong-要完完全全一样weak-页面内容一样，只是时间戳不一样可以回一个一样的etag。","aria-hidden":"true"}},[t._v("#")]),t._v(" Etag weak 和strong有什么区别\nstrong 要完完全全一样\nweak 页面内容一样，只是时间戳不一样可以回一个一样的etag。")]),t._v(" "),e("h2",{attrs:{id:"app-all和app-use的区别及性能差异all-执行完整匹配-use-只匹配前缀-，all是路由中指代所有的请求方式，use是中间件。"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#app-all和app-use的区别及性能差异all-执行完整匹配-use-只匹配前缀-，all是路由中指代所有的请求方式，use是中间件。","aria-hidden":"true"}},[t._v("#")]),t._v(" app.all和app.use的区别及性能差异"),e("br"),t._v("\nall 执行完整匹配, use 只匹配前缀 ，\nall是路由中指代所有的请求方式，use是中间件。")]),t._v(" "),e("h2",{attrs:{id:"如何捕捉next-err-传递的错误express中内置了一个错误处理程序。如果请求内的同步代码抛出异常或调用next-err-，那么-express-会将当前请求视为处于错误状态，并跳过所有剩余的非错误处理路由和中间件函数，最后被内置的错误处理程序处理。"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#如何捕捉next-err-传递的错误express中内置了一个错误处理程序。如果请求内的同步代码抛出异常或调用next-err-，那么-express-会将当前请求视为处于错误状态，并跳过所有剩余的非错误处理路由和中间件函数，最后被内置的错误处理程序处理。","aria-hidden":"true"}},[t._v("#")]),t._v(" 如何捕捉next(err)传递的错误"),e("br"),t._v("\nexpress中内置了一个错误处理程序。如果请求内的同步代码抛出异常或调用next(err)，那么 Express 会将当前请求视为处于错误状态，并跳过所有剩余的非错误处理路由和中间件函数，最后被内置的错误处理程序处理。")]),t._v(" "),e("h2",{attrs:{id:"路由function内部的错误是在哪个环节捕捉的"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#路由function内部的错误是在哪个环节捕捉的","aria-hidden":"true"}},[t._v("#")]),t._v(" 路由function内部的错误是在哪个环节捕捉的")]),t._v(" "),e("h2",{attrs:{id:"node-js为什么处理异步io快-利用事件队列，不用等待io完成，在非阻塞io返回之前，node主线程可以用来处理其他事物，此时性能提升非常明显。"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#node-js为什么处理异步io快-利用事件队列，不用等待io完成，在非阻塞io返回之前，node主线程可以用来处理其他事物，此时性能提升非常明显。","aria-hidden":"true"}},[t._v("#")]),t._v(" Node.js为什么处理异步IO快?"),e("br"),t._v("\n利用事件队列，不用等待IO完成，在非阻塞IO返回之前，node主线程可以用来处理其他事物，此时性能提升非常明显。")]),t._v(" "),e("h2",{attrs:{id:"node中的错误怎么捕获？"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#node中的错误怎么捕获？","aria-hidden":"true"}},[t._v("#")]),t._v(" Node中的错误怎么捕获？")]),t._v(" "),e("ol",[e("li",[t._v("使用uncaughtExprection去捕获异常")])]),t._v(" "),e("p",[t._v('process.on("uncaughtExpection", function(err){')]),t._v(" "),e("pre",[e("code",[t._v("  console.log(err)         \n")])]),t._v(" "),e("p",[t._v("})")]),t._v(" "),e("ol",{attrs:{start:"2"}},[e("li",[t._v("用try-catch在回调函数前捕获异常")]),t._v(" "),e("li",[t._v("用框架去包住，捕获异常")])]),t._v(" "),e("p",[t._v("// error handler\napp.use(function(err, req, res, next) {")]),t._v(" "),e("pre",[e("code",[t._v("// set locals, only providing error in development\nres.locals.message = err.message;\nres.locals.error = req.app.get('env') === 'development' ? err : {};\n\n// render the error page\nres.status(err.status || 500);\nres.render('error');\n")])]),t._v(" "),e("h2",{attrs:{id:""}},[e("a",{staticClass:"header-anchor",attrs:{href:"#","aria-hidden":"true"}},[t._v("#")]),t._v(" });")]),t._v(" "),e("h2",{attrs:{id:"如果在回调函数中如何捕获异常呢？"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#如果在回调函数中如何捕获异常呢？","aria-hidden":"true"}},[t._v("#")]),t._v(" 如果在回调函数中如何捕获异常呢？")]),t._v(" "),e("h2",{attrs:{id:"如果是回调函数中捕获异常怎么做？用domain去捕获，domian捕获会抛出500错误，但是domain捕获有一个问题，会丢失栈信息，无法保证程序健康进行，所以要结束进程，在回调函数中process-exit-1-，然后用node的server-close方法再去释放，server-close连接释放后自动结束进程，所以不用在server-close中去结束进程process-exit-1-uncaughtexpection捕获异常的的原理就是：uncaughtexpection事件存在回调函数process-on-uncaughtexpection-callback-时node不会强制结束进程，这样可弥补domain丢失stack的问题"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#如果是回调函数中捕获异常怎么做？用domain去捕获，domian捕获会抛出500错误，但是domain捕获有一个问题，会丢失栈信息，无法保证程序健康进行，所以要结束进程，在回调函数中process-exit-1-，然后用node的server-close方法再去释放，server-close连接释放后自动结束进程，所以不用在server-close中去结束进程process-exit-1-uncaughtexpection捕获异常的的原理就是：uncaughtexpection事件存在回调函数process-on-uncaughtexpection-callback-时node不会强制结束进程，这样可弥补domain丢失stack的问题","aria-hidden":"true"}},[t._v("#")]),t._v(' 如果是回调函数中捕获异常怎么做？用domain去捕获，domian捕获会抛出500错误，但是domain捕获有一个问题，会丢失栈信息，无法保证程序健康进行，所以要结束进程，在回调函数中process.exit(1)，然后用node的server.close方法再去释放，server.close连接释放后自动结束进程，所以不用在server.close中去结束进程process.exit(1)\nuncaughtExpection捕获异常的的原理就是：uncaughtExpection事件存在回调函数process.on("uncaughtExpection", callback)时node不会强制结束进程，这样可弥补domain丢失stack的问题')]),t._v(" "),e("h2",{attrs:{id:"node中遇到错误，进程退出了怎么办？"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#node中遇到错误，进程退出了怎么办？","aria-hidden":"true"}},[t._v("#")]),t._v(" Node中遇到错误，进程退出了怎么办？")]),t._v(" "),e("ol",[e("li",[t._v("捕获uncaughtException")]),t._v(" "),e("li",[t._v("使用守护进程\npm2 和 forever ，它们都可以实现进程守护，底层也都是 child_process 模块和 cluster 模块 实现的。"),e("br"),t._v("\nRPC 简单的理解是一个节点请求另一个节点提供的服务"),e("br"),t._v("\nRPC 的全称是 Remote Procedure Call 是一种进程间通信方式。"),e("br"),t._v("\n它允许程序调用另一个地址空间（通常是共享网络的另一台机器上）的过程或函数，而不用程序员显式编码这个远程调用的细节。"),e("br"),t._v("\n即无论是调用本地接口/服务的还是远程的接口/服务，本质上编写的调用代码基本相同。"),e("br"),t._v("\n比如两台服务器A，B，一个应用部署在A服务器上，想要调用B服务器上应用提供的函数或者方法，由于不在一个内存空间，不能直接调用，这时候需要通过就可以应用RPC框架的实现来解决。")])]),t._v(" "),e("h2",{attrs:{id:"promise的错误如何统一捕获？"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#promise的错误如何统一捕获？","aria-hidden":"true"}},[t._v("#")]),t._v(" Promise的错误如何统一捕获？")]),t._v(" "),e("p",[t._v("错误捕获装饰器尝试")]),t._v(" "),e("div",{staticClass:"language-js line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-js"}},[e("code",[e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token function-variable function"}},[t._v("tryCatch")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("msg")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("target"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" name"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" descriptor")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" original "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" descriptor"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("value\n    "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("typeof")]),t._v(" original "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("===")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v("'function'")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        descriptor"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),e("span",{pre:!0,attrs:{class:"token function-variable function"}},[t._v("value")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("async")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token parameter"}},[e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("...")]),t._v("args")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n            "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("try")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n                "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" result "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("await")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("original")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("apply")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" args"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n                "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" result\n            "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("catch")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("e"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n                message"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("error")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("e"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("message "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("||")]),t._v(" msg "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("||")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v("'出错了!请稍后重试'")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n            "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n        "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" descriptor\n"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])]),t._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[t._v("1")]),e("br"),e("span",{staticClass:"line-number"},[t._v("2")]),e("br"),e("span",{staticClass:"line-number"},[t._v("3")]),e("br"),e("span",{staticClass:"line-number"},[t._v("4")]),e("br"),e("span",{staticClass:"line-number"},[t._v("5")]),e("br"),e("span",{staticClass:"line-number"},[t._v("6")]),e("br"),e("span",{staticClass:"line-number"},[t._v("7")]),e("br"),e("span",{staticClass:"line-number"},[t._v("8")]),e("br"),e("span",{staticClass:"line-number"},[t._v("9")]),e("br"),e("span",{staticClass:"line-number"},[t._v("10")]),e("br"),e("span",{staticClass:"line-number"},[t._v("11")]),e("br"),e("span",{staticClass:"line-number"},[t._v("12")]),e("br"),e("span",{staticClass:"line-number"},[t._v("13")]),e("br"),e("span",{staticClass:"line-number"},[t._v("14")]),e("br")])]),e("p",[t._v("Promise中的ajax 可以try catch 到么？")]),t._v(" "),e("h2",{attrs:{id:"node-的cluster模式是什么？"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#node-的cluster模式是什么？","aria-hidden":"true"}},[t._v("#")]),t._v(" Node 的Cluster模式是什么？")]),t._v(" "),e("h2",{attrs:{id:"cluster是一个nodejs内置的模块，用于nodejs多核处理-工作原理集群模块会创建一个master主线程，然后复制任意多份程序并启动，这叫做工作线程。工作线程通过-ipc-频道进行通信并且使用了-round-robin-algorithm-算法进行工作调度以此实现负载均衡。round-robin调度策略主要是master主线程负责接收所有的连接并派发给下面的各个工作线程。"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#cluster是一个nodejs内置的模块，用于nodejs多核处理-工作原理集群模块会创建一个master主线程，然后复制任意多份程序并启动，这叫做工作线程。工作线程通过-ipc-频道进行通信并且使用了-round-robin-algorithm-算法进行工作调度以此实现负载均衡。round-robin调度策略主要是master主线程负责接收所有的连接并派发给下面的各个工作线程。","aria-hidden":"true"}},[t._v("#")]),t._v(" cluster是一个nodejs内置的模块，用于nodejs多核处理."),e("br"),t._v("\n工作原理\n集群模块会创建一个master主线程，然后复制任意多份程序并启动，这叫做工作线程。\n工作线程通过 IPC 频道进行通信并且使用了 Round-robin algorithm 算法进行工作调度以此实现负载均衡。\nRound-robin调度策略主要是master主线程负责接收所有的连接并派发给下面的各个工作线程。")]),t._v(" "),e("h2",{attrs:{id:"node中的进程和线程什么区别？"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#node中的进程和线程什么区别？","aria-hidden":"true"}},[t._v("#")]),t._v(" Node中的进程和线程什么区别？")]),t._v(" "),e("p",[t._v("单线程就是一个进程只开一个线程"),e("br"),t._v("\n进程是线程的容器"),e("br"),t._v("\n调度：线程作为调度和分配的基本单位，进程作为拥有资源的基本单位"),e("br"),t._v("\n拥有资源：进程是拥有资源的一个独立单位，线程不拥有系统资源，但可以访问隶属于进程的资源")]),t._v(" "),e("h2",{attrs:{id:"node中如何创建一个进程？"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#node中如何创建一个进程？","aria-hidden":"true"}},[t._v("#")]),t._v(" Node中如何创建一个进程？")]),t._v(" "),e("h2",{attrs:{id:"node的多个进程如何通信？"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#node的多个进程如何通信？","aria-hidden":"true"}},[t._v("#")]),t._v(" Node的多个进程如何通信？")]),t._v(" "),e("p",[t._v("使用共享内存，信号量。这种方式可以通过 child_process 模块实现。"),e("br"),t._v("\n使用套接。这种方式可以使用 net，http，websocket 模块实现，还可以使用 socket.io 来实现（推荐）。"),e("br"),t._v("\n使用共享文件。这种方式通过监听文件的变化来实现，不过效率不理想（不推荐）。"),e("br"),t._v("\n使用订阅发布，响应式数据库。通过 Redis 这些数据库，并利用它们的特性进行多进程通信。")]),t._v(" "),e("h2",{attrs:{id:"如何监控node？"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#如何监控node？","aria-hidden":"true"}},[t._v("#")]),t._v(" 如何监控Node？")]),t._v(" "),e("p",[t._v("node-monitor"),e("br"),t._v("\nShell脚本将定期向节点服务器插件询问测量数据。\n如果节点服务器尚未启动或关闭，则脚本会将相应的信息发送到monitis（monitor起了一个服务）。\n随着Node服务器可用，测量值将被捕获并发送到monitis。\nnode-memwatch")]),t._v(" "),e("h2",{attrs:{id:"node中的日志如何串行保证？"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#node中的日志如何串行保证？","aria-hidden":"true"}},[t._v("#")]),t._v(" Node中的日志如何串行保证？")]),t._v(" "),e("p",[t._v("保存函数执行顺序，然后执行数组中下一个函数的函数")]),t._v(" "),e("h2",{attrs:{id:"node中的事件循环是什么？"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#node中的事件循环是什么？","aria-hidden":"true"}},[t._v("#")]),t._v(" Node中的事件循环是什么？")]),t._v(" "),e("p",[t._v("它是一个无限的while循环，调用Epoll（Kqueue）“等待”或“池”，当Node.js发生（回调、事件、fs）时，它会路由到Node.js，并且在Epoll没有等待的情况下退出")])])])}),[],!1,null,null,null);a.default=s.exports}}]);