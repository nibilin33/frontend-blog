(window.webpackJsonp=window.webpackJsonp||[]).push([[18],{211:function(e,t,n){"use strict";n.r(t);var s=n(0),r=Object(s.a)({},(function(){var e=this,t=e.$createElement,n=e._self._c||t;return n("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[n("h2",{attrs:{id:"内嵌web加载慢"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#内嵌web加载慢","aria-hidden":"true"}},[e._v("#")]),e._v(" 内嵌web加载慢")]),e._v(" "),n("p",[e._v("优化的核心是让服务端的资源能够本地化"),n("br"),e._v(" "),n("strong",[e._v("方案一：PWA")]),n("br"),e._v("\n那么什么是PWA？")]),e._v(" "),n("blockquote",[n("p",[e._v("Progressive Web App, 简称 PWA，是提升 Web App 的体验的一种新方法，能给用户原生应用的体验。\nPWA 能做到原生应用的体验不是靠特指某一项技术，而是经过应用一些新技术进行改进，\n在安全、性能和体验三个方面都有很大提升，PWA 本质上是 Web App，\n借助一些新技术也具备了 Native App 的一些特性，兼具 Web App 和 Native App 的优点。")])]),e._v(" "),n("blockquote",[n("p",[e._v("PWA 的主要特点包括下面三点：")]),e._v(" "),n("ul",[n("li",[e._v("可靠 - 即使在不稳定的网络环境下，也能瞬间加载并展现")]),e._v(" "),n("li",[e._v("体验 - 快速响应，并且有平滑的动画响应用户的操作")]),e._v(" "),n("li",[e._v("粘性 - 像设备上的原生应用，具有沉浸式的用户体验，用户可以添加到桌面"),n("br"),e._v("\nPWA 本身强调渐进式，并不要求一次性达到安全、性能和体验上的所有要求，开发者可以通过 PWA Checklist 查看现有的特征。")])])]),e._v(" "),n("p",[e._v("具体的可以查看 "),n("a",{attrs:{href:"https://lavas.baidu.com/pwa/README",target:"_blank",rel:"noopener noreferrer"}},[e._v("https://lavas.baidu.com/pwa/README"),n("OutboundLink")],1),n("br"),e._v("\n或者 "),n("a",{attrs:{href:"https://lavas-project.github.io/pwa-book/",target:"_blank",rel:"noopener noreferrer"}},[e._v("PWA 应用实战"),n("OutboundLink")],1),n("br"),e._v(" "),n("strong",[e._v("想法")]),n("br"),e._v("\nPWA请求一次后资源都缓存在本地了，可以利用这个特点，在终端启动的时候先请求"),n("br"),e._v("\n往后所有资源都可以在缓存里面拿，当资源需要更新的时候，Service Worker 也提供"),n("br"),e._v("\n更新资源的方法。"),n("br"),e._v("\n这样从缓存到更新所有策略都无需终端干涉，终端目测只要修改cef的一些配置。"),n("br"),e._v("\n但目前来看，server-workder 有https,或者127.0.0.1 的限制。"),n("br"),e._v("\n如果为http请求无法注册成功。")]),e._v(" "),n("p",[n("strong",[e._v("方案二：")]),n("br"),e._v("\n终端在请求到html的时候，写入一个js脚本，这个脚本做资源判断，"),n("br"),e._v("\n如果资源和本地一致，替换成本地资源路径。"),n("br"),e._v("\n如果存在不一致，先使用远程的。并且需要下载资源包进行替换。")]),e._v(" "),n("p",[n("strong",[e._v("方案三：")]),n("br"),e._v("\n前提：本地已经下载好资源。node需要支持跨域请求")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v('    app.use("*", function(req, res, next) {\n        res.header("Access-Control-Allow-Origin", "*");\n        res.header(\n          "Access-Control-Allow-Headers",\n          "Content-Type, Content-Length, Authorization, Accept, X-Requested-With , Origin"\n        );\n        res.header("Access-Control-Allow-Methods", "PUT, POST, GET, DELETE, OPTIONS");\n        next();\n    });\n')])])]),n("p",[e._v("用file协议直接打开index.html，前端路由模式需要改成hash。"),n("br"),e._v("\n在ajax请求方面，如果webview能够拦截请求，需要判断是请求资源还是接口请求。"),n("br"),e._v("\n在图片资源全部变成base64, base64-inline-loader"),n("br"),e._v("\n{\ntest: /.(jpe?g|png|ttf|eot|svg|woff(2)?)(?[a-z0-9=&.]+)?$/,\nuse: 'base64-inline-loader?limit=1000&name=[name].[ext]'\n}\n如果是接口请求，需要加上服务器地址。"),n("br"),e._v("\n如果无法拦截，就需要向终端获取服务器地址。"),n("br"),e._v("\n本地更新策略采用定时请求版本情况，发现版本变更，下载资源包替换。"),n("br"),e._v("\n这个大概由原来无感知更新变成有感知更新。")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("  打包方式的修改  \n \"buildLocal\": \"cross-env ROOTPATH=./ node build/build.js -n pc && node build/themeExtract.js -p ./\"  \n 把全局变量注入  \nnew webpack.DefinePlugin({\n    'process.env': env,\n    'ROOTPATH': !!process.env.ROOTPATH\n})\n\nwebpack.base.conf.js  \n    const imgLoader = !!process.env.ROOTPATH ?  \n    {\n        test: /\\.(jpe?g|png|ttf|eot|svg|woff(2)?)(\\?[a-z0-9=&.]+)?$/,\n        use: 'base64-inline-loader?limit=10000&name=[name].[ext]'\n    }: {\n        test: /\\.(png|jpe?g|gif|svg)(\\?.*)?$/,\n        loader: 'url-loader',\n        options: {\n            limit: 10,\n            name: utils.assetsPath('img/[name].[hash:7].[ext]')\n        }\n    };\n    const fontLoader = !!process.env.ROOTPATH ?\n    {} :{\n        test: /\\.(woff2?|eot|ttf|otf|swf)(\\?.*)?$/,\n        loader: 'url-loader',\n        options: {\n            limit: 10000,\n            name: utils.assetsPath('fonts/[name].[hash:7].[ext]')\n        }\n    };  \n------------------------------------\n     const PATH = process.env.ROOTPATH ? process.env.ROOTPATH : '/ume/';\n     assetsPublicPath: PATH\n     \n")])])]),n("h2",{attrs:{id:"android的webview概率触摸白屏"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#android的webview概率触摸白屏","aria-hidden":"true"}},[e._v("#")]),e._v(" Android的webview概率触摸白屏")]),e._v(" "),n("p",[e._v("网上看到的一个类似的解释："),n("br"),e._v("\nwebkit在绘制页面时会将结构分为各种层，"),n("br"),e._v("\n当层足够大时就会变成很大的平铺层。"),n("br"),e._v("\n这样一来webkit在每次页面结构发生变化时不需要都渲染整个页面而是渲染对应层了，"),n("br"),e._v("\n这对渲染速度来说相当的重要。"),n("br"),e._v("\nwebkit会给各种层分配一定大小的“后备存储器”在内存里缓存起来，"),n("br"),e._v("\n这就是绘制层的上下文，通过这个上下文就可以很容易的实现各种效果（动画，3D变换等），"),n("br"),e._v("\n“后备存储器”内存占用大小不仅依层而定，"),n("br"),e._v("\n跟设备和显示方式也是有关的，假设这在普通屏幕下是1：1的，"),n("br"),e._v("\n但在Retina屏幕下则是1：2的，并且放大时这个量会成倍增加；"),n("br"),e._v("\n一张图片是10X10，普通屏幕分配的就是10X10，Retina初始则是20X20。"),n("br"),e._v("\n这也表明Retina是更加消耗内存的。"),n("br"),e._v("\n当层很大时，意味着“后备存储器”会消耗更大的内存，为了避免这点，"),n("br"),e._v("\nwebkit并不会绘制一个很大的层来存储一个很大的页面，"),n("br"),e._v("\n比如说平铺层则会拆分成很多的块来绘制，即尽占用尽可能小的内存，"),n("br"),e._v("\n只是将可视范围内的那部分渲染出来。"),n("br"),e._v("\n这就是为什么我们在大页面滚动时会发现下面的内容慢慢显示，"),n("br"),e._v("\n向上滚动时上面的内容还慢慢显示的原因。")]),e._v(" "),n("p",[e._v("以下则是webkit划分为层绘制的场景：")]),e._v(" "),n("p",[e._v("1、页面主容器永远是独立的平铺层"),n("br"),e._v("\n2.绘制密集型元素时，如video，canvas"),n("br"),e._v("\n3、应用3D transformations的元素，包括translate3d, rotate3d, translateZ"),n("br"),e._v("\n4、内容被加强时，如Filters, masks, reflections, opacity, transitions, animations"),n("br"),e._v("\n5、某些特殊的情况下也会，如position:fixed, -webkit-overflow-scrolling:touch"),n("br"),e._v("\n6、任何在已知层上覆盖的内容")]),e._v(" "),n("p",[n("strong",[e._v("所以解决方案就是Android开启硬件加速")])]),e._v(" "),n("h2",{attrs:{id:"nginx-502问题，node-的锅？！"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#nginx-502问题，node-的锅？！","aria-hidden":"true"}},[e._v("#")]),e._v(" NGINX 502问题，node 的锅？！")]),e._v(" "),n("p",[e._v("对于一个没有服务器任何相关经验的人类，"),n("br"),e._v("\n接收到这样的一个结论，感受到巨大的恶意。"),n("br"),e._v("\n叕一次踏上自证清白的道路。"),n("br"),e._v("\n觉得node扛不住，那就来吧。"),n("br"),e._v("\n1.简单的node服务")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("const express = require('express');\nconst path = require('path');\nconst app = express();\nconst http =  require(\"http\");\nconst log4js = require('log4js');\nlog4js.configure({\n    appenders: { cheese: { type: 'file', filename: 'cheese.log' } },\n    categories: { default: { appenders: ['cheese'], level: 'error' } }\n});\nconst logger = log4js.getLogger('cheese');\napp.use(log4js.connectLogger(logger));\napp.use(express.static(path.join(__dirname,'docs')));\napp.use(function(request, response) {\n    try {\n        response.sendFile(path.resolve('docs/index.html'));\n    }catch (e) {\n        logger.error('sendFile error %s', e.toString());\n    }\n});\nhttp.createServer(app).listen(3000, '0.0.0.0', function () {\n    var host = this.address().address;\n    var port = this.address().port;\n    logger.error('Service listening http at http://%s:%s', host, port);\n});\n")])])]),n("p",[e._v("2.Locust—python压力测试工具"),n("br"),e._v(" "),n("a",{attrs:{href:"https://docs.locust.io/en/stable/what-is-locust.html",target:"_blank",rel:"noopener noreferrer"}},[e._v("使用文档"),n("OutboundLink")],1),n("br"),e._v("\n安装：pip install locustio\n简单的locustio脚本")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v('# coding: utf-8\nfrom locust import HttpLocust, TaskSet, task  \nclass MyTaskSet(TaskSet):\n    @task(1)\n    def index(self):\n        self.client.get("/ume/extension")\n\nclass MyLocust(HttpLocust):\n    task_set = MyTaskSet\n    min_wait = 5000\n    max_wait = 15000\n')])])]),n("p",[e._v("跑起来"),n("br"),e._v("\nlocust -f locustTest.py --host=http://"),n("br"),e._v("\n访问 localhost:8089 开始模拟并发"),n("br"),e._v(" "),n("img",{attrs:{src:"https://github.com/nibilin33/frontend-blog/raw/master/press/guide/img/locust.png",alt:"本地执行文件"}}),n("br"),e._v(" "),n("img",{attrs:{src:"https://github.com/nibilin33/frontend-blog/raw/master/press/guide/img/web.png",alt:"图形界面"}}),n("br"),e._v(" "),n("strong",[e._v("结论")]),n("br"),e._v("\n直接压node没有问题，2000用户并发400，可以处理过来，但是加上NG代理，出现失败。"),n("br"),e._v("\n到此，问题转交。")]),e._v(" "),n("h2",{attrs:{id:"大数据量情况的性能问题"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#大数据量情况的性能问题","aria-hidden":"true"}},[e._v("#")]),e._v(" 大数据量情况的性能问题")]),e._v(" "),n("h3",{attrs:{id:"可以用上的工具"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#可以用上的工具","aria-hidden":"true"}},[e._v("#")]),e._v(" 可以用上的工具")]),e._v(" "),n("ul",[n("li",[e._v("css 压力测试(css stress test)")]),e._v(" "),n("li",[e._v("css 性能分析器（the css profilers are coming）")]),e._v(" "),n("li",[e._v("css lint")]),e._v(" "),n("li",[e._v("dom monster")])]),e._v(" "),n("h3",{attrs:{id:"ui性能关注点"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#ui性能关注点","aria-hidden":"true"}},[e._v("#")]),e._v(" UI性能关注点")]),e._v(" "),n("ul",[n("li",[e._v("大量元素应用border-radius会拖慢页面")]),e._v(" "),n("li",[e._v("调整移动设备的viewport标签可以减少渲染时间")]),e._v(" "),n("li",[e._v("旧版webkit boxshandows 在滚动和渲染会有延迟问题")]),e._v(" "),n("li",[e._v("css 径向渐变在某些浏览器会有渲染问题，特别是Android")]),e._v(" "),n("li",[e._v("避免使用IE css 滤镜，会有性能问题")]),e._v(" "),n("li",[e._v("使用硬件加速css动画替代javascript动画")])]),e._v(" "),n("h2",{attrs:{id:"内存泄漏问题"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#内存泄漏问题","aria-hidden":"true"}},[e._v("#")]),e._v(" 内存泄漏问题")])])}),[],!1,null,null,null);t.default=r.exports}}]);