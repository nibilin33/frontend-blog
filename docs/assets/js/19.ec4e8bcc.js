(window.webpackJsonp=window.webpackJsonp||[]).push([[19],{404:function(t,n,r){"use strict";r.r(n);var e=r(54),s=Object(e.a)({},(function(){var t=this,n=t.$createElement,r=t._self._c||n;return r("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[r("h2",{attrs:{id:"惰性单例模式"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#惰性单例模式"}},[t._v("#")]),t._v(" 惰性单例模式")]),t._v(" "),r("p",[t._v("lazyload加载图片，它就是惰性加载，只当含有图片资源的dom元素出现在媒体设备的可视区时，图片资源才会被加载，这种加载模式就是惰性加载.")]),t._v(" "),r("div",{staticClass:"language- extra-class"},[r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[t._v("var singleton = function(fn) {\n    var instance;\n    return function() {\n        return instance || (instance = fn.apply(this, arguments));\n    }\n};\n")])])]),r("h2",{attrs:{id:"发布订阅vs观察者"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#发布订阅vs观察者"}},[t._v("#")]),t._v(" 发布订阅vs观察者")]),t._v(" "),r("p",[r("a",{attrs:{href:"https://github.com/MudOnTire/frontend-design-patterns",target:"_blank",rel:"noopener noreferrer"}},[t._v("参考"),r("OutboundLink")],1)]),t._v(" "),r("p",[t._v("观察者模式中观察者和目标直接进行交互，"),r("br"),t._v("\n而发布订阅模式中统一由调度中心进行处理，订阅者和发布者互不干扰."),r("br"),t._v("\n从使用层面上讲："),r("br"),t._v("\n观察者模式，多用于单个应用内部"),r("br"),t._v("\n发布订阅模式，则更多的是一种跨应用的模式(cross-application pattern)，比如我们常用的消息中间件")]),t._v(" "),r("p",[t._v("观察者模式中Subject对象一般需要实现以下API："),r("br"),t._v("\n● subscribe(): 接收一个观察者observer对象，使其订阅自己"),r("br"),t._v("\n● unsubscribe(): 接收一个观察者observer对象，使其取消订阅自己"),r("br"),t._v("\n● fire(): 触发事件，通知到所有观察者")])])}),[],!1,null,null,null);n.default=s.exports}}]);