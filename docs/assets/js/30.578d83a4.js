(window.webpackJsonp=window.webpackJsonp||[]).push([[30],{412:function(t,e,n){"use strict";n.r(e);var s=n(54),r=Object(s.a)({},(function(){var t=this,e=t.$createElement,n=t._self._c||e;return n("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[n("h2",{attrs:{id:"内嵌web加载慢"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#内嵌web加载慢"}},[t._v("#")]),t._v(" 内嵌web加载慢")]),t._v(" "),n("p",[t._v("优化的核心是让服务端的资源能够本地化"),n("br"),t._v(" "),n("strong",[t._v("方案一：PWA")]),n("br"),t._v("\n那么什么是PWA？")]),t._v(" "),n("blockquote",[n("p",[t._v("Progressive Web App, 简称 PWA，是提升 Web App 的体验的一种新方法，能给用户原生应用的体验。\nPWA 能做到原生应用的体验不是靠特指某一项技术，而是经过应用一些新技术进行改进，\n在安全、性能和体验三个方面都有很大提升，PWA 本质上是 Web App，\n借助一些新技术也具备了 Native App 的一些特性，兼具 Web App 和 Native App 的优点。")])]),t._v(" "),n("blockquote",[n("p",[t._v("PWA 的主要特点包括下面三点：")]),t._v(" "),n("ul",[n("li",[t._v("可靠 - 即使在不稳定的网络环境下，也能瞬间加载并展现")]),t._v(" "),n("li",[t._v("体验 - 快速响应，并且有平滑的动画响应用户的操作")]),t._v(" "),n("li",[t._v("粘性 - 像设备上的原生应用，具有沉浸式的用户体验，用户可以添加到桌面"),n("br"),t._v("\nPWA 本身强调渐进式，并不要求一次性达到安全、性能和体验上的所有要求，开发者可以通过 PWA Checklist 查看现有的特征。")])])]),t._v(" "),n("p",[t._v("具体的可以查看 "),n("a",{attrs:{href:"https://lavas.baidu.com/pwa/README",target:"_blank",rel:"noopener noreferrer"}},[t._v("https://lavas.baidu.com/pwa/README"),n("OutboundLink")],1),n("br"),t._v("\n或者 "),n("a",{attrs:{href:"https://lavas-project.github.io/pwa-book/",target:"_blank",rel:"noopener noreferrer"}},[t._v("PWA 应用实战"),n("OutboundLink")],1),n("br"),t._v(" "),n("strong",[t._v("想法")]),n("br"),t._v("\nPWA请求一次后资源都缓存在本地了，可以利用这个特点，在终端启动的时候先请求"),n("br"),t._v("\n往后所有资源都可以在缓存里面拿，当资源需要更新的时候，Service Worker 也提供"),n("br"),t._v("\n更新资源的方法。"),n("br"),t._v("\n这样从缓存到更新所有策略都无需终端干涉，终端目测只要修改cef的一些配置。"),n("br"),t._v("\n但目前来看，server-workder 有https,或者127.0.0.1 的限制。"),n("br"),t._v("\n如果为http请求无法注册成功。")]),t._v(" "),n("p",[n("strong",[t._v("方案二：")]),n("br"),t._v("\n终端代理所有请求，服务器下发一个资源列表，终端根据资源列表提前下载资源到本地。"),n("br"),t._v("\n当发现请求命中资源列表，则返回本地的资源，不然直接放行请求去拉取服务器资源。"),n("br"),t._v("\n服务器会提供获取资源列表的文件请求。"),n("br"),t._v("\n当发现变更的时候，需要更新这个资源列表文件，并进行下载。"),n("br"),t._v("\n生成资源列表的webpack-plugin可以到我的vue-solutions 查看")]),t._v(" "),n("p",[n("strong",[t._v("方案三：")]),n("br"),t._v("\n资源包有NG做目录映射")]),t._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v("location /web_zip/xx {  \nroot /usr/local/xxx; \nautoindex on;   \nexpires 12h;    \nproxy_store on；    \n}\n")])])]),n("p",[t._v("验证资源包完整性：\nlinux : md5sum"),n("br"),t._v("\nwindows: certutil -hashfile 文件名  MD5"),n("br"),t._v("\n前提：本地已经下载好资源。node需要支持跨域请求")]),t._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v('    app.use("*", function(req, res, next) {\n        res.header("Access-Control-Allow-Origin", "*");\n        res.header(\n          "Access-Control-Allow-Headers",\n          "Content-Type, Content-Length, Authorization, Accept, X-Requested-With , Origin"\n        );\n        res.header("Access-Control-Allow-Methods", "PUT, POST, GET, DELETE, OPTIONS");\n        next();\n    });\n')])])]),n("p",[t._v("用file协议直接打开index.html，前端路由模式需要改成hash。"),n("br"),t._v("\n在ajax请求方面，如果webview能够拦截请求，需要判断是请求资源还是接口请求。"),n("br"),t._v("\n在图片资源全部变成base64, base64-inline-loader"),n("br"),t._v("\n{\ntest: /.(jpe?g|png|ttf|eot|svg|woff(2)?)(?[a-z0-9=&.]+)?$/,\nuse: 'base64-inline-loader?limit=1000&name=[name].[ext]'\n}\n如果是接口请求，需要加上服务器地址。"),n("br"),t._v("\n如果无法拦截，就需要向终端获取服务器地址。"),n("br"),t._v("\n初始版本号和资源包会打包到应用里面，版本变更的时候，通过通道通知客户端，\n客户端比对服务器下方的版本好与本地版本号是否一致，\n下载资源包替换。"),n("br"),t._v("\n如果下载解压过程异常，文件被篡改，则改回请求远程服务器。")]),t._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v("  打包方式的修改  \n \"buildLocal\": \"cross-env ROOTPATH=./ node build/build.js -n pc && node build/themeExtract.js -p ./\"  \n 把全局变量注入  \nnew webpack.DefinePlugin({\n    'process.env': env,\n    'ROOTPATH': !!process.env.ROOTPATH\n})\n\nwebpack.base.conf.js  \n    const imgLoader = !!process.env.ROOTPATH ?  \n    {\n        test: /\\.(jpe?g|png|ttf|eot|svg|woff(2)?)(\\?[a-z0-9=&.]+)?$/,\n        use: 'base64-inline-loader?limit=10000&name=[name].[ext]'\n    }: {\n        test: /\\.(png|jpe?g|gif|svg)(\\?.*)?$/,\n        loader: 'url-loader',\n        options: {\n            limit: 10,\n            name: utils.assetsPath('img/[name].[hash:7].[ext]')\n        }\n    };\n    const fontLoader = !!process.env.ROOTPATH ?\n    {} :{\n        test: /\\.(woff2?|eot|ttf|otf|swf)(\\?.*)?$/,\n        loader: 'url-loader',\n        options: {\n            limit: 10000,\n            name: utils.assetsPath('fonts/[name].[hash:7].[ext]')\n        }\n    };  \n------------------------------------\n     const PATH = process.env.ROOTPATH ? process.env.ROOTPATH : '/ume/';\n     assetsPublicPath: PATH\n     \n")])])]),n("h3",{attrs:{id:"全流程瓶颈分析"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#全流程瓶颈分析"}},[t._v("#")]),t._v(" 全流程瓶颈分析")]),t._v(" "),n("p",[n("strong",[t._v("1.常用命令")]),n("br"),t._v("\n查看系统：cat /proc/version"),n("br"),t._v("\n查看系统版本： cat /etc/os-release"),n("br"),t._v("\n查看进程： ps"),n("br"),t._v(" "),n("strong",[t._v("2.数据分析搜集并且图形化")]),n("br"),t._v(" "),n("a",{attrs:{href:"http://nmon.sourceforge.net/pmwiki.php",target:"_blank",rel:"noopener noreferrer"}},[t._v("nmon"),n("OutboundLink")],1),n("br"),t._v("\n1）tar -zxvf nmon16e_mpginc.tar.gz"),n("br"),t._v("\n2）拷贝并重命名 cp nmon_x86_64_centos /usr/bin/nmon"),n("br"),t._v("\n3）授权 chmod 777 nmon\n4）root 可执行 ln -s /usr/bin/nmon /usr/sbin/nmon\n5) nmon -f -t -s 30 -c 10 -m /home/\n6) 通过sort命令可以将nmon结果文件转换为csv文件 sort -A LS-HDP-MH-VM-173-188_161108_1412.nmon> LS-HDP-MH-VM-173-188_161108_1412.csv\n7) nmon_analyser（生成性能报告）\n")]),n("details",[n("summary",[t._v("nmon 参数意思")]),t._v(" "),n("a",{attrs:{href:"https://blog.csdn.net/qq_39720249/article/details/84325837",target:"_blank",rel:"noopener noreferrer"}},[t._v("报表参数详解"),n("OutboundLink")],1),n("br"),t._v("\n-f     电子表格输出格式[注意：默认-s300 -c288]   输出文件是{hostname} _YYYYMMDD_HHMM.nmon"),n("br"),t._v("\n-F    {filename},与-f相同，但用户提供的文件名"),n("br"),t._v("\n-c   {number}快照数"),n("br"),t._v("\n-d    请求磁盘服务和等待时间（DISKSERV和DISKWAIT）"),n("br"),t._v("\n-i    {percent}在使用少于此数量的CPU时忽略进程生成TOP部分 - 对减少数据量很有用"),n("br"),t._v("\n-g   {filename}包含磁盘组定义的文件"),n("br"),t._v("\n-l    {dpl}每张纸的hdisk数 - 默认为150，最大为250."),n("br"),t._v("\n-m   {dir} NMON在保存文件之前更改为此目录"),n("br"),t._v("\n-r    {runname}进入电子表格文件[默认主机名]"),n("br"),t._v("\n-s    {秒}快照之间的间隔"),n("br"),t._v("\n-x    容量规划（1天时间，每15分钟监控一次= -fdt -s900 -c96）"),n("br"),t._v("\n-t    包括输出中的顶级进程"),n("br"),t._v("\n-T    as -t plus在UARG部分保存命令行参数"),n("br"),t._v("\n-A    包括异步I / O（PROCAIO）部分的数据"),n("br"),t._v("\n-D    防止生成DISK部分（在磁盘组时有用）正在使用，因为有太多的硬盘要处理）"),n("br"),t._v("\n-E    停止生成ESS部分（磁盘组时需要）正在使用因为有太多的vpath要处理）"),n("br"),t._v("\n-J    防止生成JFS部分（防止Excel错误当你有超过255个文件系统）"),n("br"),t._v("\n-L    包括LARGEPAGE部分"),n("br"),t._v("\n-N    包括NFS部分"),n("br"),t._v("\n-S    包括带子类的WLM部分"),n("br"),t._v("\n-W    包括没有子类的WLM部分"),n("br"),t._v("\n-Y    包括SUMMARY部分（非常有效的替代-t if不需要PID级别数据）"),n("br")]),n("p"),t._v(" "),n("p",[n("strong",[t._v("3.结论")])]),t._v(" "),n("h2",{attrs:{id:"android的webview概率触摸白屏"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#android的webview概率触摸白屏"}},[t._v("#")]),t._v(" Android的webview概率触摸白屏")]),t._v(" "),n("p",[t._v("网上看到的一个类似的解释："),n("br"),t._v("\nwebkit在绘制页面时会将结构分为各种层，"),n("br"),t._v("\n当层足够大时就会变成很大的平铺层。"),n("br"),t._v("\n这样一来webkit在每次页面结构发生变化时不需要都渲染整个页面而是渲染对应层了，"),n("br"),t._v("\n这对渲染速度来说相当的重要。"),n("br"),t._v("\nwebkit会给各种层分配一定大小的“后备存储器”在内存里缓存起来，"),n("br"),t._v("\n这就是绘制层的上下文，通过这个上下文就可以很容易的实现各种效果（动画，3D变换等），"),n("br"),t._v("\n“后备存储器”内存占用大小不仅依层而定，"),n("br"),t._v("\n跟设备和显示方式也是有关的，假设这在普通屏幕下是1：1的，"),n("br"),t._v("\n但在Retina屏幕下则是1：2的，并且放大时这个量会成倍增加；"),n("br"),t._v("\n一张图片是10X10，普通屏幕分配的就是10X10，Retina初始则是20X20。"),n("br"),t._v("\n这也表明Retina是更加消耗内存的。"),n("br"),t._v("\n当层很大时，意味着“后备存储器”会消耗更大的内存，为了避免这点，"),n("br"),t._v("\nwebkit并不会绘制一个很大的层来存储一个很大的页面，"),n("br"),t._v("\n比如说平铺层则会拆分成很多的块来绘制，即尽占用尽可能小的内存，"),n("br"),t._v("\n只是将可视范围内的那部分渲染出来。"),n("br"),t._v("\n这就是为什么我们在大页面滚动时会发现下面的内容慢慢显示，"),n("br"),t._v("\n向上滚动时上面的内容还慢慢显示的原因。")]),t._v(" "),n("p",[t._v("以下则是webkit划分为层绘制的场景：")]),t._v(" "),n("p",[t._v("1、页面主容器永远是独立的平铺层"),n("br"),t._v("\n2.绘制密集型元素时，如video，canvas"),n("br"),t._v("\n3、应用3D transformations的元素，包括translate3d, rotate3d, translateZ"),n("br"),t._v("\n4、内容被加强时，如Filters, masks, reflections, opacity, transitions, animations"),n("br"),t._v("\n5、某些特殊的情况下也会，如position:fixed, -webkit-overflow-scrolling:touch"),n("br"),t._v("\n6、任何在已知层上覆盖的内容")]),t._v(" "),n("p",[n("strong",[t._v("所以解决方案就是Android开启硬件加速")])]),t._v(" "),n("h2",{attrs:{id:"nginx-502问题-node-的锅"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#nginx-502问题-node-的锅"}},[t._v("#")]),t._v(" NGINX 502问题，node 的锅？！")]),t._v(" "),n("p",[t._v("对于一个没有服务器任何相关经验的人类，"),n("br"),t._v("\n接收到这样的一个结论，感受到巨大的恶意。"),n("br"),t._v("\n叕一次踏上自证清白的道路。"),n("br"),t._v("\n过程："),n("br"),t._v("\n我分析NG日志，发现NG在尝试连接node服务，被拒绝了。"),n("br"),t._v("\n便决定压测。"),n("br"),t._v("\n1.简单的node服务")]),t._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v("const express = require('express');\nconst path = require('path');\nconst app = express();\nconst http =  require(\"http\");\nconst log4js = require('log4js');\nlog4js.configure({\n    appenders: { cheese: { type: 'file', filename: 'cheese.log' } },\n    categories: { default: { appenders: ['cheese'], level: 'error' } }\n});\nconst logger = log4js.getLogger('cheese');\napp.use(log4js.connectLogger(logger));\napp.use(express.static(path.join(__dirname,'docs')));\napp.use(function(request, response) {\n    try {\n        response.sendFile(path.resolve('docs/index.html'));\n    }catch (e) {\n        logger.error('sendFile error %s', e.toString());\n    }\n});\nhttp.createServer(app).listen(3000, '0.0.0.0', function () {\n    var host = this.address().address;\n    var port = this.address().port;\n    logger.error('Service listening http at http://%s:%s', host, port);\n});\n")])])]),n("p",[t._v("2.Locust—python压力测试工具"),n("br"),t._v(" "),n("a",{attrs:{href:"https://docs.locust.io/en/stable/what-is-locust.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("使用文档"),n("OutboundLink")],1),n("br"),t._v("\n简单的locustio脚本")]),t._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v('# coding: utf-8\nfrom locust import HttpLocust, TaskSet, task  \nclass MyTaskSet(TaskSet):\n    @task(1)\n    def index(self):\n        self.client.get("/ume/extension")\n\nclass MyLocust(HttpLocust):\n    task_set = MyTaskSet\n    min_wait = 5000\n    max_wait = 15000\n')])])]),n("div",{staticClass:"custom-block tip"},[n("p",{staticClass:"custom-block-title"},[t._v("windows版")]),t._v(" "),n("p",[t._v("安装：pip install locustio"),n("br"),t._v("\n如果安装失败，把版本降低地装 pip install locustio==0.13.1"),n("br"),t._v("\n跑起来"),n("br"),t._v("\nlocust -f locustTest.py --host=http://"),n("br"),t._v("\n访问 localhost:8089 开始模拟并发"),n("br"),t._v(" "),n("img",{attrs:{src:"https://github.com/nibilin33/frontend-blog/raw/master/press/guide/img/locust.png",alt:"本地执行文件"}}),n("br"),t._v(" "),n("img",{attrs:{src:"https://github.com/nibilin33/frontend-blog/raw/master/press/guide/img/web.png",alt:"图形界面"}})])]),t._v(" "),n("div",{staticClass:"custom-block tip"},[n("p",{staticClass:"custom-block-title"},[t._v("Linux版")]),t._v(" "),n("p",[t._v("python2.7安装：pip install locustio"),n("br"),t._v("\n安装失败，版本不支持，换：pip install locustio==0.13.5"),n("br"),t._v("\n安装request失败，版本问题，换：pip install -I requests==2.14.2"),n("br"),t._v("\nlocust -f locustTest.py --no-web -c 2000 -r 500 -t 3000")])]),t._v(" "),n("p",[n("strong",[t._v("结论")]),n("br"),t._v("\n请求html，直接压node没有问题，2000用户并发400，可以处理过来，但是加上NG代理，出现失败。"),n("br"),t._v("\n最后排查到后端代码出现端口占用的问题。"),n("br"),t._v("\n因为单个HTML文件输出的大小不是很大，决定加上资源文件做并发压测。"),n("br"),t._v("\n结果发现，资源文件在并发400的时候有1%的情况输出失败。"),n("br"),t._v("\n分析了一下机子的情况，发现IO利用率不高，都是在磁盘写。"),n("br"),t._v("\n于是发现express没有配缓存，调参小能手，解决。")]),t._v(" "),n("h2",{attrs:{id:"大数据量情况的性能问题"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#大数据量情况的性能问题"}},[t._v("#")]),t._v(" 大数据量情况的性能问题")]),t._v(" "),n("h3",{attrs:{id:"可以用上的工具"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#可以用上的工具"}},[t._v("#")]),t._v(" 可以用上的工具")]),t._v(" "),n("ul",[n("li",[t._v("css 压力测试(css stress test)")]),t._v(" "),n("li",[t._v("css 性能分析器（the css profilers are coming）")]),t._v(" "),n("li",[t._v("css lint")]),t._v(" "),n("li",[t._v("dom monster")])]),t._v(" "),n("h3",{attrs:{id:"ui性能关注点"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#ui性能关注点"}},[t._v("#")]),t._v(" UI性能关注点")]),t._v(" "),n("ul",[n("li",[t._v("大量元素应用border-radius会拖慢页面")]),t._v(" "),n("li",[t._v("调整移动设备的viewport标签可以减少渲染时间")]),t._v(" "),n("li",[t._v("旧版webkit boxshandows 在滚动和渲染会有延迟问题")]),t._v(" "),n("li",[t._v("css 径向渐变在某些浏览器会有渲染问题，特别是Android")]),t._v(" "),n("li",[t._v("避免使用IE css 滤镜，会有性能问题")]),t._v(" "),n("li",[t._v("使用硬件加速css动画替代javascript动画")])]),t._v(" "),n("h2",{attrs:{id:"作死的兼容性问题"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#作死的兼容性问题"}},[t._v("#")]),t._v(" 作死的兼容性问题")]),t._v(" "),n("h3",{attrs:{id:"proxy"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#proxy"}},[t._v("#")]),t._v(" Proxy")]),t._v(" "),n("p",[t._v("开发的时候确定了不考虑IE，结果遇到功能复用，用iframe做隔离，确定会遇上爱情....(～￣(OO)￣)ブ"),n("br"),t._v("\n这是一个开发了两周，每天1000行的功能,试过polyfill依旧有问题，怎么办...."),n("br"),t._v("\n突然想到，vue3用proxy替代之前的Object.defineProperty....(～￣(OO)￣)ブ"),n("br")]),n("details",[n("summary",[t._v("Show Me The Code")]),n("p"),t._v(" "),n("p",[t._v("import {\nisFunction,\n} from 'lodash';\nimport {\nfirstLetterUpperCase,\n} from '@/utils/tools';")]),t._v(" "),n("p",[t._v("class CustomProxy {\nparams = {}")]),t._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",[n("code",[t._v("constructor(data) {\n    Object.keys(data).forEach((name) => {\n        Object.defineProperty(this.params, name, {\n            enumerable: true,\n            configurable: true,\n            get: () => data[name],\n            set: (newValue) => {\n                isFunction(data[`set${firstLetterUpperCase(name)}`])\n                && data[`set${firstLetterUpperCase(name)}`](newValue);\n                data[name] = newValue;\n            },\n        });\n    });\n}\n")])])]),n("p",[t._v("}\nexport default function createDefensiveObject(data) {\nreturn new CustomProxy(data);\n}")])]),t._v(" "),n("h3",{attrs:{id:"date"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#date"}},[t._v("#")]),t._v(" Date")]),t._v(" "),n("p",[t._v("new Date('2019-01-01 10:00') 这种方式在除了ie都行"),n("br"),t._v("\nie 要用new Date('2019-01-01T10:00')"),n("br"),t._v("\nnew Date('2019/01/01T10:00') 在Firefox上有问题")]),t._v(" "),n("h3",{attrs:{id:"display-table-cell"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#display-table-cell"}},[t._v("#")]),t._v(" display:table-cell")]),t._v(" "),n("p",[t._v("设定height为具体某个值，在Firefox上显示是设定值*2"),n("br"),t._v("\n解决：tr上overflow:hidden，并且设定高度")]),t._v(" "),n("h2",{attrs:{id:"优化会议预约"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#优化会议预约"}},[t._v("#")]),t._v(" 优化会议预约")]),t._v(" "),n("div",{staticClass:"custom-block tip"},[n("p",{staticClass:"custom-block-title"},[t._v("TIP")]),t._v(" "),n("p",[t._v("背景： 公司的真实会议室+虚拟会议市>100，页面要展示两天的会议记录，以15分钟为一个间隔。再加上\n每天一个会议室至少有5个会议。页面渲染卡顿，然后蹦了。")])]),t._v(" "),n("p",[t._v("因为一进去就蹦了，我根本没法用devtools分析哪个环境出问题，只能看代码。"),n("br"),t._v("\n做了我认为最小原则的调整。")]),t._v(" "),n("ol",[n("li",[t._v("只展示可视区间的节点")]),t._v(" "),n("li",[t._v("减少不必要的vue的双向绑定数据，减少事件绑定。"),n("br"),t._v("\n原本的设计是每一个时间格都是一个组件，每个格子都有拖拽的事件监听，每个格子都有自己的tooltip，"),n("br"),t._v("\n每个格子都知道会议的大量信息，你想想，48x4x100，1W多的节点，1W多的数据量，得有多少重复无用的数据。"),n("br"),t._v("\n我就做大量的精简工作，每个时间格子就单纯点，不需要知道那么多信息，只需要知道坐标就好。"),n("br"),t._v("\n全局就一个tooltip，鼠标移动过去的时候，tooltip跟过去就好。所有需要展示的内容回调最外层的组件就好。")])]),t._v(" "),n("p",[t._v("一波操作调整后，几百个会议室都是秒出来，操作也不卡顿，也不再奔溃了。")]),t._v(" "),n("div",{staticClass:"custom-block tip"},[n("p",{staticClass:"custom-block-title"},[t._v("TIP")]),t._v(" "),n("p",[t._v("优化，基本都是在做剪枝操作，就是尽量提取必须的，减少冗余。")])]),t._v(" "),n("h2",{attrs:{id:"优化组织架构"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#优化组织架构"}},[t._v("#")]),t._v(" 优化组织架构")]),t._v(" "),n("h4",{attrs:{id:"难受的历史"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#难受的历史"}},[t._v("#")]),t._v(" 难受的历史")]),t._v(" "),n("blockquote",[n("p",[t._v("1.大数据量情况页面切换两下浏览器崩溃了"),n("br"),t._v("\n2.默认勾选容易费时太长奔溃"),n("br"),t._v("\n3.渲染压力太大"),n("br"),t._v("\n4.内存只增不减"),n("br"),t._v("\n5.慢")])]),t._v(" "),n("h4",{attrs:{id:"第一版-内存泄漏"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#第一版-内存泄漏"}},[t._v("#")]),t._v(" 第一版：内存泄漏")]),t._v(" "),n("p",[t._v("问题代码\n"),n("img",{attrs:{src:"https://github.com/nibilin33/frontend-blog/raw/master/press/guide/img/wrongcode.png",alt:"问题代码"}}),t._v("\n循环引用导致无法GC"),n("br"),t._v("\n解决代码")]),t._v(" "),n("h4",{attrs:{id:"第一段解决代码的灵感来自-《垃圾回收算法手册》这本书"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#第一段解决代码的灵感来自-《垃圾回收算法手册》这本书"}},[t._v("#")]),t._v(" 第一段解决代码的灵感来自 《垃圾回收算法手册》这本书")]),t._v(" "),n("p",[n("img",{attrs:{src:"https://github.com/nibilin33/frontend-blog/raw/master/press/guide/img/book.png",alt:"垃圾回收算法手册"}})]),t._v(" "),n("h4",{attrs:{id:"第二版-性能提升-最小化原则"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#第二版-性能提升-最小化原则"}},[t._v("#")]),t._v(" 第二版：性能提升 --- 最小化原则")]),t._v(" "),n("ul",[n("li",[t._v("[x] 废弃JQ --(180KB+30KB)你如果非常需要dom操作的工具时候，就要想到，庞大的东西必然有人会去简化，我们可以参考zepto去实现一版更小的工具类$")]),t._v(" "),n("li",[t._v("[x] 大数据量展示 -- clusterize.js(7KB)(只展示可视区间的节点)\n####人生要有一种信念，没有你"),n("s",[t._v("做不到")]),t._v("找不到，只有你想不到\n你能想到的优化点，基本都有人实现过了，不用从头造轮子，把期望目标转成关键词搜索 https://github.com/cheton/infinite-tree")])]),t._v(" "),n("h4",{attrs:{id:"edge-记录ui响应"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#edge-记录ui响应"}},[t._v("#")]),t._v(" Edge(记录UI响应)")]),t._v(" "),n("p",[t._v("修改前,初始化需要4,241.812 ms"),n("br"),t._v("\n修改后，1,421.073 ms")]),t._v(" "),n("h4",{attrs:{id:"chrome"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#chrome"}},[t._v("#")]),t._v(" Chrome")]),t._v(" "),n("p",[t._v("修改前 784.133ms"),n("br"),t._v("\n修改后 90.811ms\n旧版树 471.270ms")]),t._v(" "),n("details",[n("summary",[t._v("Show Me The Code")]),t._v("\n只有一个目的，去掉双向绑定，由这个对象做所有树对象的内存管理，手动去垃圾回收    \n当然去掉双向绑定还有一个方法，Object.freeze(),这代表这个数据你不能做任何操作，只能查看。    \n"),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v("class nbTree {  \nconstructor() { \n    this.nbTree = {};   \n}   \n}   \nexport default new nbTree();    \n")])])])]),t._v(" "),n("h4",{attrs:{id:"利用好console"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#利用好console"}},[t._v("#")]),t._v(" 利用好console")]),t._v(" "),n("ul",[n("li",[t._v("[x] 占用内存 ---- console.memory")]),t._v(" "),n("li",[t._v("[x] 花费时间 ---- console.profile(),console.profileEnd()")])]),t._v(" "),n("h2",{attrs:{id:"跨部门的相爱相杀"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#跨部门的相爱相杀"}},[t._v("#")]),t._v(" 跨部门的相爱相杀")]),t._v(" "),n("h3",{attrs:{id:"qt内嵌webview奔溃"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#qt内嵌webview奔溃"}},[t._v("#")]),t._v(" QT内嵌webview奔溃")]),t._v(" "),n("div",{staticClass:"custom-block tip"},[n("p",{staticClass:"custom-block-title"},[t._v("TIP")]),t._v(" "),n("p",[t._v("背景：上传一个2M多的图片，webview的render进程就奔溃了。")])]),t._v(" "),n("p",[t._v("客户端认为是一次没法开辟那么大的内存空间，要求前端做图片大小的限制，"),n("br"),t._v("\n但前端本身已经限制了10M大小，而且直接在chrome浏览器上做上传，浏览器并没有奔溃。"),n("br"),t._v("\n想想也知道，才2M多就奔溃是什么鬼。我不能接受这种解决方案，因为QT的内嵌内核和chrome是一样的，"),n("br"),t._v("\n都是拿chromium弄的，既然chrome不会奔溃，那一定是有什么参数配置可以调。万能的Google，"),n("br"),t._v("\n我习惯是用英文关键词做搜索，只要关键词对了，基本都能找到国外的丰富的答案。"),n("br"),t._v("\n然后发现，chromium编译的时候是默认没有大地址模式，需要重新编译加上大地址模式...")]),t._v(" "),n("h3",{attrs:{id:"约定接口调用无效"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#约定接口调用无效"}},[t._v("#")]),t._v(" 约定接口调用无效")]),t._v(" "),n("div",{staticClass:"custom-block tip"},[n("p",{staticClass:"custom-block-title"},[t._v("TIP")]),t._v(" "),n("p",[t._v("背景： 前端把方法挂在window上，终端调用window上的方法，然而终端没有拿到回执。")])]),t._v(" "),n("p",[t._v("🐵：没收到数据"),n("br"),t._v("\n🐧：没看到你调用"),n("br"),t._v("\n🐵：不可能，你写的不对吧"),n("br"),t._v("\n🐧：把你调用的地方截图我看看"),n("br"),t._v("\n🐵：你看不懂的，这个是swift"),n("br"),t._v("\n🐧：show me your code"),n("br"),t._v("\n🐧：你的语法...错了吧"),n("br"),t._v("\n🐵：怎么可能..."),n("br"),t._v("\n🐵：..."),n("br"),t._v("\n🐵：再见")]),t._v(" "),n("div",{staticClass:"custom-block tip"},[n("p",{staticClass:"custom-block-title"},[t._v("TIP")]),t._v(" "),n("p",[t._v("代码是不会说谎的，各执己见，不如show code。")])]),t._v(" "),n("h2",{attrs:{id:"离屏渲染优化"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#离屏渲染优化"}},[t._v("#")]),t._v(" 离屏渲染优化")]),t._v(" "),n("p",[t._v("看electron看到离屏渲染，就找资料了解了一下。")]),t._v(" "),n("h3",{attrs:{id:"渲染机制"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#渲染机制"}},[t._v("#")]),t._v(" 渲染机制")]),t._v(" "),n("p",[t._v("CPU将计算好的需要显示的内容提交给GPU，GPU渲染完成后将渲染结果放入帧缓冲区，随后视频控制器会按照Vsync(垂直脉冲)信号逐行读取帧缓冲区的数据，经过可能的数模转换传递给显示器进行显示。")]),t._v(" "),n("h3",{attrs:{id:"原理"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#原理"}},[t._v("#")]),t._v(" 原理")]),t._v(" "),n("p",[t._v("GPU在当前屏幕缓冲区以外新开辟一个缓冲区进行渲染操作。")]),t._v(" "),n("h3",{attrs:{id:"相关资料"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#相关资料"}},[t._v("#")]),t._v(" 相关资料")]),t._v(" "),n("p",[t._v("https://juejin.im/post/5dc3ad196fb9a04ac07ce1a0#heading-0"),n("br"),t._v("\nhttp://www.cocoachina.com/articles/26292")])])}),[],!1,null,null,null);e.default=r.exports}}]);