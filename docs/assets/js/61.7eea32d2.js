(window.webpackJsonp=window.webpackJsonp||[]).push([[61],{334:function(e,r,a){"use strict";a.r(r);var v=a(14),t=Object(v.a)({},(function(){var e=this,r=e._self._c;return r("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[r("h1",{attrs:{id:"分支管理规范"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#分支管理规范"}},[e._v("#")]),e._v(" 分支管理规范")]),e._v(" "),r("h2",{attrs:{id:"问题背景"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#问题背景"}},[e._v("#")]),e._v(" 问题背景")]),e._v(" "),r("p",[e._v("使用一个dev，pre分支管理dev 环境和 pre环境，研发release环境基本废弃（服务端环境不稳定）, 统一通过pre分支上master")]),e._v(" "),r("ol",[r("li",[e._v("频繁需要人为介入管理分支和解决dev,pre冲突，解决冲突过程容易误操作拉取dev,pre分支的代码提交到release 分支")]),e._v(" "),r("li",[e._v("需要频繁重建剔除pre环境分支不需要上线的代码，如果出现人为失误，就容易带上不应该上线的分支代码")]),e._v(" "),r("li",[e._v("多版本并行,一个版本出问题，就阻塞所有版本进度")]),e._v(" "),r("li",[e._v("一旦存在一个长期测试不上线的研发版本，需要延伸dev2, pre2，多几个类似的研发版本就炸裂了")]),e._v(" "),r("li",[e._v("测试环境的单一, 需要审核一直陪跑，留给MR的时间往往迫于测试的紧急和突发性很难预留")])]),e._v(" "),r("h2",{attrs:{id:"调整方案"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#调整方案"}},[e._v("#")]),e._v(" 调整方案")]),e._v(" "),r("ol",[r("li",[e._v("发布通过release上线，上线前需要反向同步master代码（最好每次提交都pull from master，定期更新），合并机器人会检测提交的分支是否落后于master的提交；")]),e._v(" "),r("li",[e._v("所有合向release的代码都需要approver;")]),e._v(" "),r("li",[e._v("每个release分支可以有自己的独立的临时的dev,pre测试环境空间，不互相影响；")]),e._v(" "),r("li",[e._v("加强前期版本规划：如果存在多个release分支同时要发布，能合并到一个release的前期就以feature合作方式合并掉，合并不掉的拉取新的release分支，将要发布的release合并到一个release发布；")]),e._v(" "),r("li",[e._v("如果业务逻辑涉及需要固定路径地址")])]),e._v(" "),r("ul",[r("li",[e._v("5.1 代码合并方式：依旧将代码提交到dev/pre分支")]),e._v(" "),r("li",[e._v("5.2 抢占式：指定分支部署覆盖环境")])]),e._v(" "),r("h3",{attrs:{id:"部署优化策略-gitlab"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#部署优化策略-gitlab"}},[e._v("#")]),e._v(" 部署优化策略(gitlab)")]),e._v(" "),r("h4",{attrs:{id:"小程序"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#小程序"}},[e._v("#")]),e._v(" 小程序")]),e._v(" "),r("p",[e._v("小程序原来是一个环境对应一个appid，要做到每个release有自己的独立测试空间，只能用研发码。"),r("br"),e._v("\n研发码就一个问题————时效性。\n解决思路其实就是，让二维码的获取变得容易:")]),e._v(" "),r("ul",[r("li",[e._v("开放交互让任何人都能获取\n"),r("ul",[r("li",[e._v("交互这块采用机器人的方式，告诉机器人项目，版本号，环境，机器人去触发出码")])])]),e._v(" "),r("li",[e._v("加快出码速度\n"),r("ul",[r("li",[e._v("利用独立分支的特性，增加构建产物cache，如果已经存在构建产物且没有变更，直接进行上传生成二维码"),r("br"),e._v("\n外加其实如果码过期，但之前访问过这个版本，在手机上可以通过访问记录找到之前的访问入口，依然可以访问")])])])]),e._v(" "),r("h4",{attrs:{id:"h5"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#h5"}},[e._v("#")]),e._v(" H5")]),e._v(" "),r("p",[e._v("H5 原来一版方案是通过域名映射到对应的文件目录"),r("br"),e._v("\n由于目前他们的使用习惯已经习惯了固定三个环境域名"),r("br"),e._v("\n就采用目录去做区分(项目名-版本号-环境)"),r("br"),e._v("\n同时提供chrome插件做分支代理，允许用原来的访问路径，然后代理到分支产物路径")])])}),[],!1,null,null,null);r.default=t.exports}}]);